// (c) 2019 Max Wolter - ALL RIGHTS RESERVED

package bindings

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// WizardGuildABI is the input ABI used to generate the binding from.
const WizardGuildABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cooAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousCeo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newCeo\",\"type\":\"address\"}],\"name\":\"CEOTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousCfo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newCfo\",\"type\":\"address\"}],\"name\":\"CFOTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousCoo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newCoo\",\"type\":\"address\"}],\"name\":\"COOTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"wizardId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"metadata\",\"type\":\"bytes32\"}],\"name\":\"MetadataSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"seriesIndex\",\"type\":\"uint64\"}],\"name\":\"SeriesClose\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"seriesIndex\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reservedIds\",\"type\":\"uint256\"}],\"name\":\"SeriesOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wizardId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"affinity\",\"type\":\"uint8\"}],\"name\":\"WizardAffinityAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wizardId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"affinity\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"innatePower\",\"type\":\"uint256\"}],\"name\":\"WizardConjured\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wizardId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cfoAddress\",\"outputs\":[{\"internalType\":\"addresspayable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeSeries\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wizardId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNextWizardIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getWizard\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"innatePower\",\"type\":\"uint88\"},{\"internalType\":\"uint8\",\"name\":\"affinity\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"metadata\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isApprovedOrOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"wizardIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint88[]\",\"name\":\"powers\",\"type\":\"uint88[]\"},{\"internalType\":\"uint8[]\",\"name\":\"affinities\",\"type\":\"uint8[]\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"mintReservedWizards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint88[]\",\"name\":\"powers\",\"type\":\"uint88[]\"},{\"internalType\":\"uint8[]\",\"name\":\"affinities\",\"type\":\"uint8[]\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"mintWizards\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"wizardIds\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reservedIds\",\"type\":\"uint256\"}],\"name\":\"openSeries\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"seriesId\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wizardId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wizardId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wizardId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wizardId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"newAffinity\",\"type\":\"uint8\"}],\"name\":\"setAffinity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCeo\",\"type\":\"address\"}],\"name\":\"setCeo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"newCfo\",\"type\":\"address\"}],\"name\":\"setCfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCoo\",\"type\":\"address\"}],\"name\":\"setCoo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"wizardIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"metadata\",\"type\":\"bytes32[]\"}],\"name\":\"setMetadata\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wizardId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wizardId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"verifySignature\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wizardId1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wizardId2\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"hash1\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"hash2\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"sig1\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sig2\",\"type\":\"bytes\"}],\"name\":\"verifySignatures\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"wizardsById\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"affinity\",\"type\":\"uint8\"},{\"internalType\":\"uint88\",\"name\":\"innatePower\",\"type\":\"uint88\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"metadata\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// WizardGuildFuncSigs maps the 4-byte function signature to its string representation.
var WizardGuildFuncSigs = map[string]string{
	"095ea7b3": "approve(address,uint256)",
	"70a08231": "balanceOf(address)",
	"0a0f8168": "ceoAddress()",
	"0519ce79": "cfoAddress()",
	"4094099a": "closeSeries()",
	"b047fb50": "cooAddress()",
	"081812fc": "getApproved(uint256)",
	"c5ffd6e1": "getNextWizardIndex()",
	"fac8eafc": "getWizard(uint256)",
	"e985e9c5": "isApprovedForAll(address,address)",
	"430c2081": "isApprovedOrOwner(address,uint256)",
	"9d158023": "mintReservedWizards(uint256[],uint88[],uint8[],address)",
	"55fdbeec": "mintWizards(uint88[],uint8[],address)",
	"4616c514": "openSeries(address,uint256)",
	"6352211e": "ownerOf(uint256)",
	"42842e0e": "safeTransferFrom(address,address,uint256)",
	"b88d4fde": "safeTransferFrom(address,address,uint256,bytes)",
	"98d7a414": "setAffinity(uint256,uint8)",
	"a22cb465": "setApprovalForAll(address,bool)",
	"88975198": "setCeo(address)",
	"2d46ed56": "setCfo(address)",
	"9986a0c6": "setCoo(address)",
	"2738ec3c": "setMetadata(uint256[],bytes32[])",
	"01ffc9a7": "supportsInterface(bytes4)",
	"23b872dd": "transferFrom(address,address,uint256)",
	"2f81b15d": "verifySignature(uint256,bytes32,bytes)",
	"a096d9f0": "verifySignatures(uint256,uint256,bytes32,bytes32,bytes,bytes)",
	"5938d97a": "wizardsById(uint256)",
}

// WizardGuildBin is the compiled bytecode used for deploying new contracts.
var WizardGuildBin = "0x60806040523480156200001157600080fd5b5060405162002f9338038062002f93833981810160405260208110156200003757600080fd5b505180600062000050336001600160e01b036200009116565b62000064826001600160e01b03620000fb16565b6001600160a01b03811615620000885762000088816001600160e01b03620001f316565b50505062000381565b600054604080516001600160a01b039283168152918316602083015280517f9d05f170f1d545b1aa21c4a4f79f17ff737f5f020ea1b333d88f29f0bbfa9fc69281900390910190a1600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146200017557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4f6e6c792043454f000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b62000189816001600160e01b03620002eb16565b600154604080516001600160a01b039283168152918316602083015280517f1cd3afc04e6ae479d2b9f74533351b52218c5b2ae4f847f681a5eac514fe11849281900390910190a1600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146200026d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4f6e6c792043454f000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b62000281816001600160e01b03620002eb16565b600254604080516001600160a01b039283168152918316602083015280517fe1033d3cc535efc343c53636bdc05c52a44d9e70b089d4ad6e974379f2c651d69281900390910190a1600280546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038116158015906200031257506000546001600160a01b03828116911614155b6200037e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f496e76616c69642043454f206164647265737300000000000000000000000000604482015290519081900360640190fd5b50565b612c0280620003916000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c80635938d97a116100f9578063a096d9f011610097578063b88d4fde11610071578063b88d4fde14610950578063c5ffd6e114610a14578063e985e9c514610a1c578063fac8eafc14610a4a576101c4565b8063a096d9f014610844578063a22cb4651461091a578063b047fb5014610948576101c4565b806388975198116100d357806388975198146106bb57806398d7a414146106e15780639986a0c6146107075780639d1580231461072d576101c4565b80635938d97a1461060f5780636352211e1461066657806370a0823114610683576101c4565b80632d46ed561161016657806342842e0e1161014057806342842e0e1461044d578063430c2081146104835780634616c514146104af57806355fdbeec146104f8576101c4565b80632d46ed561461036f5780632f81b15d146103955780634094099a14610445576101c4565b8063095ea7b3116101a2578063095ea7b3146102455780630a0f81681461027357806323b872dd1461027b5780632738ec3c146102b1576101c4565b806301ffc9a7146101c95780630519ce7914610204578063081812fc14610228575b600080fd5b6101f0600480360360208110156101df57600080fd5b50356001600160e01b031916610aa1565b604080519115158252519081900360200190f35b61020c610acc565b604080516001600160a01b039092168252519081900360200190f35b61020c6004803603602081101561023e57600080fd5b5035610adb565b6102716004803603604081101561025b57600080fd5b506001600160a01b038135169060200135610b3d565b005b61020c610c4e565b6102716004803603606081101561029157600080fd5b506001600160a01b03813581169160208101359091169060400135610c5d565b610271600480360360408110156102c757600080fd5b810190602081018135600160201b8111156102e157600080fd5b8201836020820111156102f357600080fd5b803590602001918460208302840111600160201b8311171561031457600080fd5b919390929091602081019035600160201b81111561033157600080fd5b82018360208201111561034357600080fd5b803590602001918460208302840111600160201b8311171561036457600080fd5b509092509050610cb2565b6102716004803603602081101561038557600080fd5b50356001600160a01b0316610f6f565b610271600480360360608110156103ab57600080fd5b813591602081013591810190606081016040820135600160201b8111156103d157600080fd5b8201836020820111156103e357600080fd5b803590602001918460018302840111600160201b8311171561040457600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061102c945050505050565b6102716110b4565b6102716004803603606081101561046357600080fd5b506001600160a01b038135811691602081013590911690604001356111fa565b6101f06004803603604081101561049957600080fd5b506001600160a01b038135169060200135611215565b6104db600480360360408110156104c557600080fd5b506001600160a01b038135169060200135611228565b6040805167ffffffffffffffff9092168252519081900360200190f35b6105bf6004803603606081101561050e57600080fd5b810190602081018135600160201b81111561052857600080fd5b82018360208201111561053a57600080fd5b803590602001918460208302840111600160201b8311171561055b57600080fd5b919390929091602081019035600160201b81111561057857600080fd5b82018360208201111561058a57600080fd5b803590602001918460208302840111600160201b831117156105ab57600080fd5b9193509150356001600160a01b031661145f565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156105fb5781810151838201526020016105e3565b505050509050019250505060405180910390f35b61062c6004803603602081101561062557600080fd5b50356115f3565b6040805160ff90951685526001600160581b0390931660208501526001600160a01b03909116838301526060830152519081900360800190f35b61020c6004803603602081101561067c57600080fd5b5035611632565b6106a96004803603602081101561069957600080fd5b50356001600160a01b031661168d565b60408051918252519081900360200190f35b610271600480360360208110156106d157600080fd5b50356001600160a01b03166116f0565b610271600480360360408110156106f757600080fd5b508035906020013560ff1661174f565b6102716004803603602081101561071d57600080fd5b50356001600160a01b03166118ca565b6102716004803603608081101561074357600080fd5b810190602081018135600160201b81111561075d57600080fd5b82018360208201111561076f57600080fd5b803590602001918460208302840111600160201b8311171561079057600080fd5b919390929091602081019035600160201b8111156107ad57600080fd5b8201836020820111156107bf57600080fd5b803590602001918460208302840111600160201b831117156107e057600080fd5b919390929091602081019035600160201b8111156107fd57600080fd5b82018360208201111561080f57600080fd5b803590602001918460208302840111600160201b8311171561083057600080fd5b9193509150356001600160a01b0316611987565b610271600480360360c081101561085a57600080fd5b81359160208101359160408201359160608101359181019060a081016080820135600160201b81111561088c57600080fd5b82018360208201111561089e57600080fd5b803590602001918460018302840111600160201b831117156108bf57600080fd5b919390929091602081019035600160201b8111156108dc57600080fd5b8201836020820111156108ee57600080fd5b803590602001918460018302840111600160201b8311171561090f57600080fd5b509092509050611bce565b6102716004803603604081101561093057600080fd5b506001600160a01b0381351690602001351515611c50565b61020c611d1c565b6102716004803603608081101561096657600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b8111156109a057600080fd5b8201836020820111156109b257600080fd5b803590602001918460018302840111600160201b831117156109d357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611d2b945050505050565b6106a9611d83565b6101f060048036036040811015610a3257600080fd5b506001600160a01b0381358116916020013516611d89565b610a6760048036036020811015610a6057600080fd5b5035611db7565b604080516001600160a01b0390951685526001600160581b03909316602085015260ff909116838301526060830152519081900360800190f35b60006001600160e01b031982166341d4d43760e01b1480610ac65750610ac682611e88565b92915050565b6002546001600160a01b031681565b6000610ae682611ebb565b610b215760405162461bcd60e51b815260040180806020018281038252602c815260200180612ab8602c913960400191505060405180910390fd5b506000908152600460205260409020546001600160a01b031690565b6000610b4882611632565b9050806001600160a01b0316836001600160a01b03161415610b9b5760405162461bcd60e51b8152600401808060200182810382526021815260200180612b326021913960400191505060405180910390fd5b336001600160a01b0382161480610bb75750610bb78133611d89565b610bf25760405162461bcd60e51b8152600401808060200182810382526038815260200180612a0b6038913960400191505060405180910390fd5b60008281526004602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6000546001600160a01b031681565b610c673382611edf565b610ca25760405162461bcd60e51b8152600401808060200182810382526031815260200180612b536031913960400191505060405180910390fd5b610cad838383611f83565b505050565b600754600160401b90046001600160a01b0316610d16576040805162461bcd60e51b815260206004820152601b60248201527f4e6f207365726965732069732063757272656e746c79206f70656e0000000000604482015290519081900360640190fd5b600754600160401b90046001600160a01b0316331480610d4057506001546001600160a01b031633145b610d7b5760405162461bcd60e51b8152600401808060200182810382526023815260200180612b846023913960400191505060405180910390fd5b828114610dcf576040805162461bcd60e51b815260206004820152601e60248201527f496e636f6e73697374656e7420706172616d65746572206c656e677468730000604482015290519081900360640190fd5b60005b83811015610f68576000858583818110610de857fe5b9050602002013590506000848484818110610dff57fe5b600754602090910292909201359250506001600160c01b031983811660c09290921b1614610e74576040805162461bcd60e51b815260206004820152601d60248201527f57697a61726473206e6f7420696e2063757272656e7420736572696573000000604482015290519081900360640190fd5b60008281526003602052604090206001015415610ecf576040805162461bcd60e51b815260206004820152601460248201527313595d1859185d1848185b1c9958591e481cd95d60621b604482015290519081900360640190fd5b80610f14576040805162461bcd60e51b815260206004820152601060248201526f496e76616c6964206d6574616461746160801b604482015290519081900360640190fd5b6000828152600360209081526040918290206001018390558151838152915184927ff6812173c9728bd3bab2f1a94129341e47af8b8b78e2da481f8c45659d2d59eb92908290030190a25050600101610dd2565b5050505050565b6000546001600160a01b03163314610fb9576040805162461bcd60e51b81526020600482015260086024820152674f6e6c792043454f60c01b604482015290519081900360640190fd5b610fc2816120b0565b600254604080516001600160a01b039283168152918316602083015280517fe1033d3cc535efc343c53636bdc05c52a44d9e70b089d4ad6e974379f2c651d69281900390910190a1600280546001600160a01b0319166001600160a01b0392909216919091179055565b600061103784611632565b905061104481848461211d565b1561104f5750610cad565b600061105a85610adb565b905061106781858561211d565b15611073575050610cad565b6040805162461bcd60e51b8152602060048201526011602482015270496e76616c6964207369676e617475726560781b604482015290519081900360640190fd5b600754600160401b90046001600160a01b0316611118576040805162461bcd60e51b815260206004820152601b60248201527f4e6f207365726965732069732063757272656e746c79206f70656e0000000000604482015290519081900360640190fd5b600754600160401b90046001600160a01b031633148061114257506001546001600160a01b031633145b61117d5760405162461bcd60e51b8152600401808060200182810382526025815260200180612b0d6025913960400191505060405180910390fd5b60078054600160401b600160e01b031981169091556040805167ffffffffffffffff9092168252517f05ba38dc3f1ba4a8bd95dbf51dd0f0141267df538cdd31a01819e9929acdce0d9181900360200190a16007805467ffffffffffffffff8082166001011667ffffffffffffffff199091161790556000600855565b610cad83838360405180602001604052806000815250611d2b565b60006112218383611edf565b9392505050565b6001546000906001600160a01b03163314611275576040805162461bcd60e51b81526020600482015260086024820152674f6e6c7920434f4f60c01b604482015290519081900360640190fd5b600754600160401b90046001600160a01b0316156112da576040805162461bcd60e51b815260206004820152601860248201527f412073657269657320697320616c7265616479206f70656e0000000000000000604482015290519081900360640190fd5b6001600160a01b038316611335576040805162461bcd60e51b815260206004820152601a60248201527f4d696e74657220616464726573732063616e6e6f742062652030000000000000604482015290519081900360640190fd5b60075467ffffffffffffffff1661138b5781611756146113865760405162461bcd60e51b8152600401808060200182810382526022815260200180612a966022913960400191505060405180910390fd5b6113d9565b600160c01b82106113d9576040805162461bcd60e51b8152602060048201526013602482015272496e76616c696420726573657276656449647360681b604482015290519081900360640190fd5b60078054600160401b600160e01b031916600160401b6001600160a01b038616021790819055600183016008556040805167ffffffffffffffff90921682526020820184905280517f5be5961d909b3736a7b784a2d25cea0eb131c6c34ccdf94b2a376819c258ec8a9281900390910190a15060075467ffffffffffffffff1692915050565b600754606090600160401b90046001600160a01b031633146114c2576040805162461bcd60e51b815260206004820152601760248201527627b7363c9031b0b63630b1363290313c9036b4b73a32b960491b604482015290519081900360640190fd5b828514611516576040805162461bcd60e51b815260206004820152601e60248201527f496e636f6e73697374656e7420706172616d65746572206c656e677468730000604482015290519081900360640190fd5b60408051848152602080860282010190915283801561153f578160200160208202803883390190505b5060085460075491925060c09190911b6001600160c01b0319160160005b848110156115dd578183828151811061157257fe5b60200260200101818152505081806001019250506115d583828151811061159557fe5b6020026020010151858a8a858181106115aa57fe5b905060200201356001600160581b03168989868181106115c657fe5b9050602002013560ff1661236e565b60010161155d565b506001600160c01b031660085595945050505050565b6003602052600090815260409020805460019091015460ff82169161010081046001600160581b031691600160601b9091046001600160a01b03169084565b600081815260036020526040812054600160601b90046001600160a01b031680610ac65760405162461bcd60e51b8152600401808060200182810382526029815260200180612a6d6029913960400191505060405180910390fd5b60006001600160a01b0382166116d45760405162461bcd60e51b815260040180806020018281038252602a815260200180612a43602a913960400191505060405180910390fd5b506001600160a01b031660009081526005602052604090205490565b6000546001600160a01b0316331461173a576040805162461bcd60e51b81526020600482015260086024820152674f6e6c792043454f60c01b604482015290519081900360640190fd5b611743816120b0565b61174c816125fa565b50565b600754600160401b90046001600160a01b031633146117af576040805162461bcd60e51b815260206004820152601760248201527627b7363c9031b0b63630b1363290313c9036b4b73a32b960491b604482015290519081900360640190fd5b60075460c01b6001600160c01b031990811690831614611816576040805162461bcd60e51b815260206004820152601c60248201527f57697a617264206e6f7420696e2063757272656e742073657269657300000000604482015290519081900360640190fd5b6000828152600360205260409020805460ff161561187b576040805162461bcd60e51b815260206004820181905260248201527f416666696e6974792063616e206f6e6c792062652063686f73656e206f6e6365604482015290519081900360640190fd5b805460ff191660ff8316908117825560408051858152602081019290925280517fef597ca22f25aec904866c3228f39dd59d3bc8345b8fd3cbea7ce568c5b1b22a9281900390910190a1505050565b6000546001600160a01b03163314611914576040805162461bcd60e51b81526020600482015260086024820152674f6e6c792043454f60c01b604482015290519081900360640190fd5b61191d816120b0565b600154604080516001600160a01b039283168152918316602083015280517f1cd3afc04e6ae479d2b9f74533351b52218c5b2ae4f847f681a5eac514fe11849281900390910190a1600180546001600160a01b0319166001600160a01b0392909216919091179055565b600754600160401b90046001600160a01b031633146119e7576040805162461bcd60e51b815260206004820152601760248201527627b7363c9031b0b63630b1363290313c9036b4b73a32b960491b604482015290519081900360640190fd5b85821480156119f557508584145b611a46576040805162461bcd60e51b815260206004820152601e60248201527f496e636f6e73697374656e7420706172616d65746572206c656e677468730000604482015290519081900360640190fd5b60005b86811015611bc4576000888883818110611a5f57fe5b600754602090910292909201359250506001600160c01b031980831660c09290921b1614611ad4576040805162461bcd60e51b815260206004820152601d60248201527f57697a61726473206e6f7420696e2063757272656e7420736572696573000000604482015290519081900360640190fd5b6001600160c01b038116611b2f576040805162461bcd60e51b815260206004820152601960248201527f57697a617264732069642063616e6e6f74206265207a65726f00000000000000604482015290519081900360640190fd5b6008546001600160c01b03821610611b8e576040805162461bcd60e51b815260206004820152601d60248201527f57697a61726473206e6f7420696e2072657365727665642072616e6765000000604482015290519081900360640190fd5b611bbb8184898986818110611b9f57fe5b905060200201356001600160581b03168888878181106115c657fe5b50600101611a49565b5050505050505050565b611c0f888786868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061102c92505050565b611bc4878684848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061102c92505050565b6001600160a01b038216331415611cae576040805162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015290519081900360640190fd5b3360008181526006602090815260408083206001600160a01b03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b6001546001600160a01b031681565b611d36848484610c5d565b611d4284848484612664565b611d7d5760405162461bcd60e51b81526004018080602001828103825260328152602001806129896032913960400191505060405180910390fd5b50505050565b60085490565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b600080600080611dc5612961565b506000858152600360209081526040918290208251608081018452815460ff8116825261010081046001600160581b031693820193909352600160601b9092046001600160a01b031692820183905260010154606082015290611e67576040805162461bcd60e51b815260206004820152601560248201527415da5e985c9908191bd95cc81b9bdd08195e1a5cdd605a1b604482015290519081900360640190fd5b60408101516020820151825160609093015191989097509195509350915050565b60006001600160e01b031982166301ffc9a760e01b1480610ac65750506001600160e01b0319166380ac58cd60e01b1490565b600090815260036020526040902054600160601b90046001600160a01b0316151590565b6000611eea82611ebb565b611f255760405162461bcd60e51b815260040180806020018281038252602c8152602001806129df602c913960400191505060405180910390fd5b6000611f3083611632565b9050806001600160a01b0316846001600160a01b03161480611f6b5750836001600160a01b0316611f6084610adb565b6001600160a01b0316145b80611f7b5750611f7b8185611d89565b949350505050565b826001600160a01b0316611f9682611632565b6001600160a01b031614611fdb5760405162461bcd60e51b8152600401808060200182810382526029815260200180612ae46029913960400191505060405180910390fd5b6001600160a01b0382166120205760405162461bcd60e51b81526004018080602001828103825260248152602001806129bb6024913960400191505060405180910390fd5b6120298161278e565b6001600160a01b038381166000818152600560209081526040808320805460001901905593861680835284832080546001019055858352600390915283822080546bffffffffffffffffffffffff16600160601b83021790559251849392917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b038116158015906120d657506000546001600160a01b03828116911614155b61174c576040805162461bcd60e51b8152602060048201526013602482015272496e76616c69642043454f206164647265737360681b604482015290519081900360640190fd5b60006001600160a01b03841661213557506000611221565b61213e846127c9565b156122875761215484630b135d3f60e11b6127cf565b1561227f57604080516020808201869052825180830382018152828401808552815191830191909120630b135d3f60e11b909152604483018181526064840194855286516084850152865189956000956001600160a01b03881695631626ba7e95948b9490939260a401918501908083838c5b838110156121df5781810151838201526020016121c7565b50505050905090810190601f16801561220c5780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561222a57600080fd5b505afa15801561223e573d6000803e3d6000fd5b505050506040513d602081101561225457600080fd5b505190506001600160e01b03198116630b135d3f60e11b141561227c57600192505050611221565b50505b506000611221565b600080600061229585612871565b925092509250600060018760405160200180807f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250601c018281526020019150506040516020818303038152906040528051906020012083868660405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015612348573d6000803e3d6000fd5b5050604051601f1901516001600160a01b038a8116911614955050505050509392505050565b6001600160a01b0383166123c9576040805162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015290519081900360640190fd5b6123d284611ebb565b15612424576040805162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015290519081900360640190fd5b6000841161246e576040805162461bcd60e51b8152602060048201526012602482015271139bc80c081d1bdad95b88185b1b1bddd95960721b604482015290519081900360640190fd5b6000826001600160581b0316116124cc576040805162461bcd60e51b815260206004820152601d60248201527f57697a61726420706f776572206d757374206265206e6f6e2d7a65726f000000604482015290519081900360640190fd5b6040805160808101825260ff83811682526001600160581b0385811660208085019182526001600160a01b038981168688018181526000606089018181528e8252600386528a822099518a549751935160ff199098169916989098176bffffffffffffffffffffff0019166101009290971691909102959095176bffffffffffffffffffffffff16600160601b94909216939093021785559251600194850155808252600590925283812080549093019092559151869291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a46040805185815260ff831660208201526001600160581b0384168183015290517f3b7fcf44666972972487f1ac302bef03ee0d35027387ba8a897207466a0817259181900360600190a150505050565b600054604080516001600160a01b039283168152918316602083015280517f9d05f170f1d545b1aa21c4a4f79f17ff737f5f020ea1b333d88f29f0bbfa9fc69281900390910190a1600080546001600160a01b0319166001600160a01b0392909216919091179055565b600061266f846127c9565b61267b57506001611f7b565b604051630a85bd0160e11b815233600482018181526001600160a01b03888116602485015260448401879052608060648501908152865160848601528651600095928a169463150b7a029490938c938b938b939260a4019060208501908083838e5b838110156126f55781810151838201526020016126dd565b50505050905090810190601f1680156127225780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561274457600080fd5b505af1158015612758573d6000803e3d6000fd5b505050506040513d602081101561276e57600080fd5b50516001600160e01b031916630a85bd0160e11b14915050949350505050565b6000818152600460205260409020546001600160a01b03161561174c57600090815260046020526040902080546001600160a01b0319169055565b3b151590565b600080806127e4856301ffc9a760e01b6128f5565b90925090508115806127f4575080155b1561280457600092505050610ac6565b612816856001600160e01b03196128f5565b909250905081158061282757508015155b1561283757600092505050610ac6565b61284185856128f5565b90925090506001821480156128565750806001145b1561286657600192505050610ac6565b506000949350505050565b600080600083516041146128cc576040805162461bcd60e51b815260206004820152601860248201527f496e76616c6964207369676e6174757265206c656e6774680000000000000000604482015290519081900360640190fd5b50505060208101516040820151604183015160ff16601b8110156128ee57601b015b9193909250565b604080516001600160e01b031983166024808301919091528251808303909101815260449091018252602081810180516001600160e01b03166301ffc9a760e01b178152825193516000808252948594939091908183858b617530fa9051909890975095505050505050565b6040805160808101825260008082526020820181905291810182905260608101919091529056fe4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724552433732313a207472616e7366657220746f20746865207a65726f20616464726573734552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e496e76616c696420726573657276656449647320666f7220317374207365726965734552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e4f6e6c79204d696e746572206f7220434f4f2063616e20636c6f73652061205365726965734552433732313a20617070726f76616c20746f2063757272656e74206f776e65724552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f7665644f6e6c79204d696e746572206f7220434f4f2063616e20736574206d65746164617461a265627a7a72315820d75bc9b0a3d71daff42dc2198669536f542ca7db116ff149f978d4d27667429264736f6c637829302e352e31332d646576656c6f702e323031392e31302e31392b636f6d6d69742e64356232663334370059"

// DeployWizardGuild deploys a new Ethereum contract, binding an instance of WizardGuild to it.
func DeployWizardGuild(auth *bind.TransactOpts, backend bind.ContractBackend, _cooAddress common.Address) (common.Address, *types.Transaction, *WizardGuild, error) {
	parsed, err := abi.JSON(strings.NewReader(WizardGuildABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(WizardGuildBin), backend, _cooAddress)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &WizardGuild{WizardGuildCaller: WizardGuildCaller{contract: contract}, WizardGuildTransactor: WizardGuildTransactor{contract: contract}, WizardGuildFilterer: WizardGuildFilterer{contract: contract}}, nil
}

// WizardGuild is an auto generated Go binding around an Ethereum contract.
type WizardGuild struct {
	WizardGuildCaller     // Read-only binding to the contract
	WizardGuildTransactor // Write-only binding to the contract
	WizardGuildFilterer   // Log filterer for contract events
}

// WizardGuildCaller is an auto generated read-only Go binding around an Ethereum contract.
type WizardGuildCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WizardGuildTransactor is an auto generated write-only Go binding around an Ethereum contract.
type WizardGuildTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WizardGuildFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type WizardGuildFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WizardGuildSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type WizardGuildSession struct {
	Contract     *WizardGuild      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// WizardGuildCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type WizardGuildCallerSession struct {
	Contract *WizardGuildCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// WizardGuildTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type WizardGuildTransactorSession struct {
	Contract     *WizardGuildTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// WizardGuildRaw is an auto generated low-level Go binding around an Ethereum contract.
type WizardGuildRaw struct {
	Contract *WizardGuild // Generic contract binding to access the raw methods on
}

// WizardGuildCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type WizardGuildCallerRaw struct {
	Contract *WizardGuildCaller // Generic read-only contract binding to access the raw methods on
}

// WizardGuildTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type WizardGuildTransactorRaw struct {
	Contract *WizardGuildTransactor // Generic write-only contract binding to access the raw methods on
}

// NewWizardGuild creates a new instance of WizardGuild, bound to a specific deployed contract.
func NewWizardGuild(address common.Address, backend bind.ContractBackend) (*WizardGuild, error) {
	contract, err := bindWizardGuild(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &WizardGuild{WizardGuildCaller: WizardGuildCaller{contract: contract}, WizardGuildTransactor: WizardGuildTransactor{contract: contract}, WizardGuildFilterer: WizardGuildFilterer{contract: contract}}, nil
}

// NewWizardGuildCaller creates a new read-only instance of WizardGuild, bound to a specific deployed contract.
func NewWizardGuildCaller(address common.Address, caller bind.ContractCaller) (*WizardGuildCaller, error) {
	contract, err := bindWizardGuild(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &WizardGuildCaller{contract: contract}, nil
}

// NewWizardGuildTransactor creates a new write-only instance of WizardGuild, bound to a specific deployed contract.
func NewWizardGuildTransactor(address common.Address, transactor bind.ContractTransactor) (*WizardGuildTransactor, error) {
	contract, err := bindWizardGuild(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &WizardGuildTransactor{contract: contract}, nil
}

// NewWizardGuildFilterer creates a new log filterer instance of WizardGuild, bound to a specific deployed contract.
func NewWizardGuildFilterer(address common.Address, filterer bind.ContractFilterer) (*WizardGuildFilterer, error) {
	contract, err := bindWizardGuild(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &WizardGuildFilterer{contract: contract}, nil
}

// bindWizardGuild binds a generic wrapper to an already deployed contract.
func bindWizardGuild(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(WizardGuildABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_WizardGuild *WizardGuildRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _WizardGuild.Contract.WizardGuildCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_WizardGuild *WizardGuildRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WizardGuild.Contract.WizardGuildTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_WizardGuild *WizardGuildRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _WizardGuild.Contract.WizardGuildTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_WizardGuild *WizardGuildCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _WizardGuild.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_WizardGuild *WizardGuildTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WizardGuild.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_WizardGuild *WizardGuildTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _WizardGuild.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) constant returns(uint256)
func (_WizardGuild *WizardGuildCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _WizardGuild.contract.Call(opts, out, "balanceOf", owner)
	return *ret0, err
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) constant returns(uint256)
func (_WizardGuild *WizardGuildSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _WizardGuild.Contract.BalanceOf(&_WizardGuild.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) constant returns(uint256)
func (_WizardGuild *WizardGuildCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _WizardGuild.Contract.BalanceOf(&_WizardGuild.CallOpts, owner)
}

// CeoAddress is a free data retrieval call binding the contract method 0x0a0f8168.
//
// Solidity: function ceoAddress() constant returns(address)
func (_WizardGuild *WizardGuildCaller) CeoAddress(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _WizardGuild.contract.Call(opts, out, "ceoAddress")
	return *ret0, err
}

// CeoAddress is a free data retrieval call binding the contract method 0x0a0f8168.
//
// Solidity: function ceoAddress() constant returns(address)
func (_WizardGuild *WizardGuildSession) CeoAddress() (common.Address, error) {
	return _WizardGuild.Contract.CeoAddress(&_WizardGuild.CallOpts)
}

// CeoAddress is a free data retrieval call binding the contract method 0x0a0f8168.
//
// Solidity: function ceoAddress() constant returns(address)
func (_WizardGuild *WizardGuildCallerSession) CeoAddress() (common.Address, error) {
	return _WizardGuild.Contract.CeoAddress(&_WizardGuild.CallOpts)
}

// CfoAddress is a free data retrieval call binding the contract method 0x0519ce79.
//
// Solidity: function cfoAddress() constant returns(address)
func (_WizardGuild *WizardGuildCaller) CfoAddress(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _WizardGuild.contract.Call(opts, out, "cfoAddress")
	return *ret0, err
}

// CfoAddress is a free data retrieval call binding the contract method 0x0519ce79.
//
// Solidity: function cfoAddress() constant returns(address)
func (_WizardGuild *WizardGuildSession) CfoAddress() (common.Address, error) {
	return _WizardGuild.Contract.CfoAddress(&_WizardGuild.CallOpts)
}

// CfoAddress is a free data retrieval call binding the contract method 0x0519ce79.
//
// Solidity: function cfoAddress() constant returns(address)
func (_WizardGuild *WizardGuildCallerSession) CfoAddress() (common.Address, error) {
	return _WizardGuild.Contract.CfoAddress(&_WizardGuild.CallOpts)
}

// CooAddress is a free data retrieval call binding the contract method 0xb047fb50.
//
// Solidity: function cooAddress() constant returns(address)
func (_WizardGuild *WizardGuildCaller) CooAddress(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _WizardGuild.contract.Call(opts, out, "cooAddress")
	return *ret0, err
}

// CooAddress is a free data retrieval call binding the contract method 0xb047fb50.
//
// Solidity: function cooAddress() constant returns(address)
func (_WizardGuild *WizardGuildSession) CooAddress() (common.Address, error) {
	return _WizardGuild.Contract.CooAddress(&_WizardGuild.CallOpts)
}

// CooAddress is a free data retrieval call binding the contract method 0xb047fb50.
//
// Solidity: function cooAddress() constant returns(address)
func (_WizardGuild *WizardGuildCallerSession) CooAddress() (common.Address, error) {
	return _WizardGuild.Contract.CooAddress(&_WizardGuild.CallOpts)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 wizardId) constant returns(address)
func (_WizardGuild *WizardGuildCaller) GetApproved(opts *bind.CallOpts, wizardId *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _WizardGuild.contract.Call(opts, out, "getApproved", wizardId)
	return *ret0, err
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 wizardId) constant returns(address)
func (_WizardGuild *WizardGuildSession) GetApproved(wizardId *big.Int) (common.Address, error) {
	return _WizardGuild.Contract.GetApproved(&_WizardGuild.CallOpts, wizardId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 wizardId) constant returns(address)
func (_WizardGuild *WizardGuildCallerSession) GetApproved(wizardId *big.Int) (common.Address, error) {
	return _WizardGuild.Contract.GetApproved(&_WizardGuild.CallOpts, wizardId)
}

// GetNextWizardIndex is a free data retrieval call binding the contract method 0xc5ffd6e1.
//
// Solidity: function getNextWizardIndex() constant returns(uint256)
func (_WizardGuild *WizardGuildCaller) GetNextWizardIndex(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _WizardGuild.contract.Call(opts, out, "getNextWizardIndex")
	return *ret0, err
}

// GetNextWizardIndex is a free data retrieval call binding the contract method 0xc5ffd6e1.
//
// Solidity: function getNextWizardIndex() constant returns(uint256)
func (_WizardGuild *WizardGuildSession) GetNextWizardIndex() (*big.Int, error) {
	return _WizardGuild.Contract.GetNextWizardIndex(&_WizardGuild.CallOpts)
}

// GetNextWizardIndex is a free data retrieval call binding the contract method 0xc5ffd6e1.
//
// Solidity: function getNextWizardIndex() constant returns(uint256)
func (_WizardGuild *WizardGuildCallerSession) GetNextWizardIndex() (*big.Int, error) {
	return _WizardGuild.Contract.GetNextWizardIndex(&_WizardGuild.CallOpts)
}

// GetWizard is a free data retrieval call binding the contract method 0xfac8eafc.
//
// Solidity: function getWizard(uint256 id) constant returns(address owner, uint88 innatePower, uint8 affinity, bytes32 metadata)
func (_WizardGuild *WizardGuildCaller) GetWizard(opts *bind.CallOpts, id *big.Int) (struct {
	Owner       common.Address
	InnatePower *big.Int
	Affinity    uint8
	Metadata    [32]byte
}, error) {
	ret := new(struct {
		Owner       common.Address
		InnatePower *big.Int
		Affinity    uint8
		Metadata    [32]byte
	})
	out := ret
	err := _WizardGuild.contract.Call(opts, out, "getWizard", id)
	return *ret, err
}

// GetWizard is a free data retrieval call binding the contract method 0xfac8eafc.
//
// Solidity: function getWizard(uint256 id) constant returns(address owner, uint88 innatePower, uint8 affinity, bytes32 metadata)
func (_WizardGuild *WizardGuildSession) GetWizard(id *big.Int) (struct {
	Owner       common.Address
	InnatePower *big.Int
	Affinity    uint8
	Metadata    [32]byte
}, error) {
	return _WizardGuild.Contract.GetWizard(&_WizardGuild.CallOpts, id)
}

// GetWizard is a free data retrieval call binding the contract method 0xfac8eafc.
//
// Solidity: function getWizard(uint256 id) constant returns(address owner, uint88 innatePower, uint8 affinity, bytes32 metadata)
func (_WizardGuild *WizardGuildCallerSession) GetWizard(id *big.Int) (struct {
	Owner       common.Address
	InnatePower *big.Int
	Affinity    uint8
	Metadata    [32]byte
}, error) {
	return _WizardGuild.Contract.GetWizard(&_WizardGuild.CallOpts, id)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) constant returns(bool)
func (_WizardGuild *WizardGuildCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _WizardGuild.contract.Call(opts, out, "isApprovedForAll", owner, operator)
	return *ret0, err
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) constant returns(bool)
func (_WizardGuild *WizardGuildSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _WizardGuild.Contract.IsApprovedForAll(&_WizardGuild.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) constant returns(bool)
func (_WizardGuild *WizardGuildCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _WizardGuild.Contract.IsApprovedForAll(&_WizardGuild.CallOpts, owner, operator)
}

// IsApprovedOrOwner is a free data retrieval call binding the contract method 0x430c2081.
//
// Solidity: function isApprovedOrOwner(address spender, uint256 tokenId) constant returns(bool)
func (_WizardGuild *WizardGuildCaller) IsApprovedOrOwner(opts *bind.CallOpts, spender common.Address, tokenId *big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _WizardGuild.contract.Call(opts, out, "isApprovedOrOwner", spender, tokenId)
	return *ret0, err
}

// IsApprovedOrOwner is a free data retrieval call binding the contract method 0x430c2081.
//
// Solidity: function isApprovedOrOwner(address spender, uint256 tokenId) constant returns(bool)
func (_WizardGuild *WizardGuildSession) IsApprovedOrOwner(spender common.Address, tokenId *big.Int) (bool, error) {
	return _WizardGuild.Contract.IsApprovedOrOwner(&_WizardGuild.CallOpts, spender, tokenId)
}

// IsApprovedOrOwner is a free data retrieval call binding the contract method 0x430c2081.
//
// Solidity: function isApprovedOrOwner(address spender, uint256 tokenId) constant returns(bool)
func (_WizardGuild *WizardGuildCallerSession) IsApprovedOrOwner(spender common.Address, tokenId *big.Int) (bool, error) {
	return _WizardGuild.Contract.IsApprovedOrOwner(&_WizardGuild.CallOpts, spender, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 wizardId) constant returns(address)
func (_WizardGuild *WizardGuildCaller) OwnerOf(opts *bind.CallOpts, wizardId *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _WizardGuild.contract.Call(opts, out, "ownerOf", wizardId)
	return *ret0, err
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 wizardId) constant returns(address)
func (_WizardGuild *WizardGuildSession) OwnerOf(wizardId *big.Int) (common.Address, error) {
	return _WizardGuild.Contract.OwnerOf(&_WizardGuild.CallOpts, wizardId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 wizardId) constant returns(address)
func (_WizardGuild *WizardGuildCallerSession) OwnerOf(wizardId *big.Int) (common.Address, error) {
	return _WizardGuild.Contract.OwnerOf(&_WizardGuild.CallOpts, wizardId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) constant returns(bool)
func (_WizardGuild *WizardGuildCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _WizardGuild.contract.Call(opts, out, "supportsInterface", interfaceId)
	return *ret0, err
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) constant returns(bool)
func (_WizardGuild *WizardGuildSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _WizardGuild.Contract.SupportsInterface(&_WizardGuild.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) constant returns(bool)
func (_WizardGuild *WizardGuildCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _WizardGuild.Contract.SupportsInterface(&_WizardGuild.CallOpts, interfaceId)
}

// VerifySignature is a free data retrieval call binding the contract method 0x2f81b15d.
//
// Solidity: function verifySignature(uint256 wizardId, bytes32 hash, bytes sig) constant returns()
func (_WizardGuild *WizardGuildCaller) VerifySignature(opts *bind.CallOpts, wizardId *big.Int, hash [32]byte, sig []byte) error {
	var ()
	out := &[]interface{}{}
	err := _WizardGuild.contract.Call(opts, out, "verifySignature", wizardId, hash, sig)
	return err
}

// VerifySignature is a free data retrieval call binding the contract method 0x2f81b15d.
//
// Solidity: function verifySignature(uint256 wizardId, bytes32 hash, bytes sig) constant returns()
func (_WizardGuild *WizardGuildSession) VerifySignature(wizardId *big.Int, hash [32]byte, sig []byte) error {
	return _WizardGuild.Contract.VerifySignature(&_WizardGuild.CallOpts, wizardId, hash, sig)
}

// VerifySignature is a free data retrieval call binding the contract method 0x2f81b15d.
//
// Solidity: function verifySignature(uint256 wizardId, bytes32 hash, bytes sig) constant returns()
func (_WizardGuild *WizardGuildCallerSession) VerifySignature(wizardId *big.Int, hash [32]byte, sig []byte) error {
	return _WizardGuild.Contract.VerifySignature(&_WizardGuild.CallOpts, wizardId, hash, sig)
}

// VerifySignatures is a free data retrieval call binding the contract method 0xa096d9f0.
//
// Solidity: function verifySignatures(uint256 wizardId1, uint256 wizardId2, bytes32 hash1, bytes32 hash2, bytes sig1, bytes sig2) constant returns()
func (_WizardGuild *WizardGuildCaller) VerifySignatures(opts *bind.CallOpts, wizardId1 *big.Int, wizardId2 *big.Int, hash1 [32]byte, hash2 [32]byte, sig1 []byte, sig2 []byte) error {
	var ()
	out := &[]interface{}{}
	err := _WizardGuild.contract.Call(opts, out, "verifySignatures", wizardId1, wizardId2, hash1, hash2, sig1, sig2)
	return err
}

// VerifySignatures is a free data retrieval call binding the contract method 0xa096d9f0.
//
// Solidity: function verifySignatures(uint256 wizardId1, uint256 wizardId2, bytes32 hash1, bytes32 hash2, bytes sig1, bytes sig2) constant returns()
func (_WizardGuild *WizardGuildSession) VerifySignatures(wizardId1 *big.Int, wizardId2 *big.Int, hash1 [32]byte, hash2 [32]byte, sig1 []byte, sig2 []byte) error {
	return _WizardGuild.Contract.VerifySignatures(&_WizardGuild.CallOpts, wizardId1, wizardId2, hash1, hash2, sig1, sig2)
}

// VerifySignatures is a free data retrieval call binding the contract method 0xa096d9f0.
//
// Solidity: function verifySignatures(uint256 wizardId1, uint256 wizardId2, bytes32 hash1, bytes32 hash2, bytes sig1, bytes sig2) constant returns()
func (_WizardGuild *WizardGuildCallerSession) VerifySignatures(wizardId1 *big.Int, wizardId2 *big.Int, hash1 [32]byte, hash2 [32]byte, sig1 []byte, sig2 []byte) error {
	return _WizardGuild.Contract.VerifySignatures(&_WizardGuild.CallOpts, wizardId1, wizardId2, hash1, hash2, sig1, sig2)
}

// WizardsById is a free data retrieval call binding the contract method 0x5938d97a.
//
// Solidity: function wizardsById(uint256 ) constant returns(uint8 affinity, uint88 innatePower, address owner, bytes32 metadata)
func (_WizardGuild *WizardGuildCaller) WizardsById(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Affinity    uint8
	InnatePower *big.Int
	Owner       common.Address
	Metadata    [32]byte
}, error) {
	ret := new(struct {
		Affinity    uint8
		InnatePower *big.Int
		Owner       common.Address
		Metadata    [32]byte
	})
	out := ret
	err := _WizardGuild.contract.Call(opts, out, "wizardsById", arg0)
	return *ret, err
}

// WizardsById is a free data retrieval call binding the contract method 0x5938d97a.
//
// Solidity: function wizardsById(uint256 ) constant returns(uint8 affinity, uint88 innatePower, address owner, bytes32 metadata)
func (_WizardGuild *WizardGuildSession) WizardsById(arg0 *big.Int) (struct {
	Affinity    uint8
	InnatePower *big.Int
	Owner       common.Address
	Metadata    [32]byte
}, error) {
	return _WizardGuild.Contract.WizardsById(&_WizardGuild.CallOpts, arg0)
}

// WizardsById is a free data retrieval call binding the contract method 0x5938d97a.
//
// Solidity: function wizardsById(uint256 ) constant returns(uint8 affinity, uint88 innatePower, address owner, bytes32 metadata)
func (_WizardGuild *WizardGuildCallerSession) WizardsById(arg0 *big.Int) (struct {
	Affinity    uint8
	InnatePower *big.Int
	Owner       common.Address
	Metadata    [32]byte
}, error) {
	return _WizardGuild.Contract.WizardsById(&_WizardGuild.CallOpts, arg0)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 wizardId) returns()
func (_WizardGuild *WizardGuildTransactor) Approve(opts *bind.TransactOpts, to common.Address, wizardId *big.Int) (*types.Transaction, error) {
	return _WizardGuild.contract.Transact(opts, "approve", to, wizardId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 wizardId) returns()
func (_WizardGuild *WizardGuildSession) Approve(to common.Address, wizardId *big.Int) (*types.Transaction, error) {
	return _WizardGuild.Contract.Approve(&_WizardGuild.TransactOpts, to, wizardId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 wizardId) returns()
func (_WizardGuild *WizardGuildTransactorSession) Approve(to common.Address, wizardId *big.Int) (*types.Transaction, error) {
	return _WizardGuild.Contract.Approve(&_WizardGuild.TransactOpts, to, wizardId)
}

// CloseSeries is a paid mutator transaction binding the contract method 0x4094099a.
//
// Solidity: function closeSeries() returns()
func (_WizardGuild *WizardGuildTransactor) CloseSeries(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WizardGuild.contract.Transact(opts, "closeSeries")
}

// CloseSeries is a paid mutator transaction binding the contract method 0x4094099a.
//
// Solidity: function closeSeries() returns()
func (_WizardGuild *WizardGuildSession) CloseSeries() (*types.Transaction, error) {
	return _WizardGuild.Contract.CloseSeries(&_WizardGuild.TransactOpts)
}

// CloseSeries is a paid mutator transaction binding the contract method 0x4094099a.
//
// Solidity: function closeSeries() returns()
func (_WizardGuild *WizardGuildTransactorSession) CloseSeries() (*types.Transaction, error) {
	return _WizardGuild.Contract.CloseSeries(&_WizardGuild.TransactOpts)
}

// MintReservedWizards is a paid mutator transaction binding the contract method 0x9d158023.
//
// Solidity: function mintReservedWizards(uint256[] wizardIds, uint88[] powers, uint8[] affinities, address owner) returns()
func (_WizardGuild *WizardGuildTransactor) MintReservedWizards(opts *bind.TransactOpts, wizardIds []*big.Int, powers []*big.Int, affinities []uint8, owner common.Address) (*types.Transaction, error) {
	return _WizardGuild.contract.Transact(opts, "mintReservedWizards", wizardIds, powers, affinities, owner)
}

// MintReservedWizards is a paid mutator transaction binding the contract method 0x9d158023.
//
// Solidity: function mintReservedWizards(uint256[] wizardIds, uint88[] powers, uint8[] affinities, address owner) returns()
func (_WizardGuild *WizardGuildSession) MintReservedWizards(wizardIds []*big.Int, powers []*big.Int, affinities []uint8, owner common.Address) (*types.Transaction, error) {
	return _WizardGuild.Contract.MintReservedWizards(&_WizardGuild.TransactOpts, wizardIds, powers, affinities, owner)
}

// MintReservedWizards is a paid mutator transaction binding the contract method 0x9d158023.
//
// Solidity: function mintReservedWizards(uint256[] wizardIds, uint88[] powers, uint8[] affinities, address owner) returns()
func (_WizardGuild *WizardGuildTransactorSession) MintReservedWizards(wizardIds []*big.Int, powers []*big.Int, affinities []uint8, owner common.Address) (*types.Transaction, error) {
	return _WizardGuild.Contract.MintReservedWizards(&_WizardGuild.TransactOpts, wizardIds, powers, affinities, owner)
}

// MintWizards is a paid mutator transaction binding the contract method 0x55fdbeec.
//
// Solidity: function mintWizards(uint88[] powers, uint8[] affinities, address owner) returns(uint256[] wizardIds)
func (_WizardGuild *WizardGuildTransactor) MintWizards(opts *bind.TransactOpts, powers []*big.Int, affinities []uint8, owner common.Address) (*types.Transaction, error) {
	return _WizardGuild.contract.Transact(opts, "mintWizards", powers, affinities, owner)
}

// MintWizards is a paid mutator transaction binding the contract method 0x55fdbeec.
//
// Solidity: function mintWizards(uint88[] powers, uint8[] affinities, address owner) returns(uint256[] wizardIds)
func (_WizardGuild *WizardGuildSession) MintWizards(powers []*big.Int, affinities []uint8, owner common.Address) (*types.Transaction, error) {
	return _WizardGuild.Contract.MintWizards(&_WizardGuild.TransactOpts, powers, affinities, owner)
}

// MintWizards is a paid mutator transaction binding the contract method 0x55fdbeec.
//
// Solidity: function mintWizards(uint88[] powers, uint8[] affinities, address owner) returns(uint256[] wizardIds)
func (_WizardGuild *WizardGuildTransactorSession) MintWizards(powers []*big.Int, affinities []uint8, owner common.Address) (*types.Transaction, error) {
	return _WizardGuild.Contract.MintWizards(&_WizardGuild.TransactOpts, powers, affinities, owner)
}

// OpenSeries is a paid mutator transaction binding the contract method 0x4616c514.
//
// Solidity: function openSeries(address minter, uint256 reservedIds) returns(uint64 seriesId)
func (_WizardGuild *WizardGuildTransactor) OpenSeries(opts *bind.TransactOpts, minter common.Address, reservedIds *big.Int) (*types.Transaction, error) {
	return _WizardGuild.contract.Transact(opts, "openSeries", minter, reservedIds)
}

// OpenSeries is a paid mutator transaction binding the contract method 0x4616c514.
//
// Solidity: function openSeries(address minter, uint256 reservedIds) returns(uint64 seriesId)
func (_WizardGuild *WizardGuildSession) OpenSeries(minter common.Address, reservedIds *big.Int) (*types.Transaction, error) {
	return _WizardGuild.Contract.OpenSeries(&_WizardGuild.TransactOpts, minter, reservedIds)
}

// OpenSeries is a paid mutator transaction binding the contract method 0x4616c514.
//
// Solidity: function openSeries(address minter, uint256 reservedIds) returns(uint64 seriesId)
func (_WizardGuild *WizardGuildTransactorSession) OpenSeries(minter common.Address, reservedIds *big.Int) (*types.Transaction, error) {
	return _WizardGuild.Contract.OpenSeries(&_WizardGuild.TransactOpts, minter, reservedIds)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 wizardId) returns()
func (_WizardGuild *WizardGuildTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, wizardId *big.Int) (*types.Transaction, error) {
	return _WizardGuild.contract.Transact(opts, "safeTransferFrom", from, to, wizardId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 wizardId) returns()
func (_WizardGuild *WizardGuildSession) SafeTransferFrom(from common.Address, to common.Address, wizardId *big.Int) (*types.Transaction, error) {
	return _WizardGuild.Contract.SafeTransferFrom(&_WizardGuild.TransactOpts, from, to, wizardId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 wizardId) returns()
func (_WizardGuild *WizardGuildTransactorSession) SafeTransferFrom(from common.Address, to common.Address, wizardId *big.Int) (*types.Transaction, error) {
	return _WizardGuild.Contract.SafeTransferFrom(&_WizardGuild.TransactOpts, from, to, wizardId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 wizardId, bytes _data) returns()
func (_WizardGuild *WizardGuildTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, wizardId *big.Int, _data []byte) (*types.Transaction, error) {
	return _WizardGuild.contract.Transact(opts, "safeTransferFrom0", from, to, wizardId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 wizardId, bytes _data) returns()
func (_WizardGuild *WizardGuildSession) SafeTransferFrom0(from common.Address, to common.Address, wizardId *big.Int, _data []byte) (*types.Transaction, error) {
	return _WizardGuild.Contract.SafeTransferFrom0(&_WizardGuild.TransactOpts, from, to, wizardId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 wizardId, bytes _data) returns()
func (_WizardGuild *WizardGuildTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, wizardId *big.Int, _data []byte) (*types.Transaction, error) {
	return _WizardGuild.Contract.SafeTransferFrom0(&_WizardGuild.TransactOpts, from, to, wizardId, _data)
}

// SetAffinity is a paid mutator transaction binding the contract method 0x98d7a414.
//
// Solidity: function setAffinity(uint256 wizardId, uint8 newAffinity) returns()
func (_WizardGuild *WizardGuildTransactor) SetAffinity(opts *bind.TransactOpts, wizardId *big.Int, newAffinity uint8) (*types.Transaction, error) {
	return _WizardGuild.contract.Transact(opts, "setAffinity", wizardId, newAffinity)
}

// SetAffinity is a paid mutator transaction binding the contract method 0x98d7a414.
//
// Solidity: function setAffinity(uint256 wizardId, uint8 newAffinity) returns()
func (_WizardGuild *WizardGuildSession) SetAffinity(wizardId *big.Int, newAffinity uint8) (*types.Transaction, error) {
	return _WizardGuild.Contract.SetAffinity(&_WizardGuild.TransactOpts, wizardId, newAffinity)
}

// SetAffinity is a paid mutator transaction binding the contract method 0x98d7a414.
//
// Solidity: function setAffinity(uint256 wizardId, uint8 newAffinity) returns()
func (_WizardGuild *WizardGuildTransactorSession) SetAffinity(wizardId *big.Int, newAffinity uint8) (*types.Transaction, error) {
	return _WizardGuild.Contract.SetAffinity(&_WizardGuild.TransactOpts, wizardId, newAffinity)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address to, bool approved) returns()
func (_WizardGuild *WizardGuildTransactor) SetApprovalForAll(opts *bind.TransactOpts, to common.Address, approved bool) (*types.Transaction, error) {
	return _WizardGuild.contract.Transact(opts, "setApprovalForAll", to, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address to, bool approved) returns()
func (_WizardGuild *WizardGuildSession) SetApprovalForAll(to common.Address, approved bool) (*types.Transaction, error) {
	return _WizardGuild.Contract.SetApprovalForAll(&_WizardGuild.TransactOpts, to, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address to, bool approved) returns()
func (_WizardGuild *WizardGuildTransactorSession) SetApprovalForAll(to common.Address, approved bool) (*types.Transaction, error) {
	return _WizardGuild.Contract.SetApprovalForAll(&_WizardGuild.TransactOpts, to, approved)
}

// SetCeo is a paid mutator transaction binding the contract method 0x88975198.
//
// Solidity: function setCeo(address newCeo) returns()
func (_WizardGuild *WizardGuildTransactor) SetCeo(opts *bind.TransactOpts, newCeo common.Address) (*types.Transaction, error) {
	return _WizardGuild.contract.Transact(opts, "setCeo", newCeo)
}

// SetCeo is a paid mutator transaction binding the contract method 0x88975198.
//
// Solidity: function setCeo(address newCeo) returns()
func (_WizardGuild *WizardGuildSession) SetCeo(newCeo common.Address) (*types.Transaction, error) {
	return _WizardGuild.Contract.SetCeo(&_WizardGuild.TransactOpts, newCeo)
}

// SetCeo is a paid mutator transaction binding the contract method 0x88975198.
//
// Solidity: function setCeo(address newCeo) returns()
func (_WizardGuild *WizardGuildTransactorSession) SetCeo(newCeo common.Address) (*types.Transaction, error) {
	return _WizardGuild.Contract.SetCeo(&_WizardGuild.TransactOpts, newCeo)
}

// SetCfo is a paid mutator transaction binding the contract method 0x2d46ed56.
//
// Solidity: function setCfo(address newCfo) returns()
func (_WizardGuild *WizardGuildTransactor) SetCfo(opts *bind.TransactOpts, newCfo common.Address) (*types.Transaction, error) {
	return _WizardGuild.contract.Transact(opts, "setCfo", newCfo)
}

// SetCfo is a paid mutator transaction binding the contract method 0x2d46ed56.
//
// Solidity: function setCfo(address newCfo) returns()
func (_WizardGuild *WizardGuildSession) SetCfo(newCfo common.Address) (*types.Transaction, error) {
	return _WizardGuild.Contract.SetCfo(&_WizardGuild.TransactOpts, newCfo)
}

// SetCfo is a paid mutator transaction binding the contract method 0x2d46ed56.
//
// Solidity: function setCfo(address newCfo) returns()
func (_WizardGuild *WizardGuildTransactorSession) SetCfo(newCfo common.Address) (*types.Transaction, error) {
	return _WizardGuild.Contract.SetCfo(&_WizardGuild.TransactOpts, newCfo)
}

// SetCoo is a paid mutator transaction binding the contract method 0x9986a0c6.
//
// Solidity: function setCoo(address newCoo) returns()
func (_WizardGuild *WizardGuildTransactor) SetCoo(opts *bind.TransactOpts, newCoo common.Address) (*types.Transaction, error) {
	return _WizardGuild.contract.Transact(opts, "setCoo", newCoo)
}

// SetCoo is a paid mutator transaction binding the contract method 0x9986a0c6.
//
// Solidity: function setCoo(address newCoo) returns()
func (_WizardGuild *WizardGuildSession) SetCoo(newCoo common.Address) (*types.Transaction, error) {
	return _WizardGuild.Contract.SetCoo(&_WizardGuild.TransactOpts, newCoo)
}

// SetCoo is a paid mutator transaction binding the contract method 0x9986a0c6.
//
// Solidity: function setCoo(address newCoo) returns()
func (_WizardGuild *WizardGuildTransactorSession) SetCoo(newCoo common.Address) (*types.Transaction, error) {
	return _WizardGuild.Contract.SetCoo(&_WizardGuild.TransactOpts, newCoo)
}

// SetMetadata is a paid mutator transaction binding the contract method 0x2738ec3c.
//
// Solidity: function setMetadata(uint256[] wizardIds, bytes32[] metadata) returns()
func (_WizardGuild *WizardGuildTransactor) SetMetadata(opts *bind.TransactOpts, wizardIds []*big.Int, metadata [][32]byte) (*types.Transaction, error) {
	return _WizardGuild.contract.Transact(opts, "setMetadata", wizardIds, metadata)
}

// SetMetadata is a paid mutator transaction binding the contract method 0x2738ec3c.
//
// Solidity: function setMetadata(uint256[] wizardIds, bytes32[] metadata) returns()
func (_WizardGuild *WizardGuildSession) SetMetadata(wizardIds []*big.Int, metadata [][32]byte) (*types.Transaction, error) {
	return _WizardGuild.Contract.SetMetadata(&_WizardGuild.TransactOpts, wizardIds, metadata)
}

// SetMetadata is a paid mutator transaction binding the contract method 0x2738ec3c.
//
// Solidity: function setMetadata(uint256[] wizardIds, bytes32[] metadata) returns()
func (_WizardGuild *WizardGuildTransactorSession) SetMetadata(wizardIds []*big.Int, metadata [][32]byte) (*types.Transaction, error) {
	return _WizardGuild.Contract.SetMetadata(&_WizardGuild.TransactOpts, wizardIds, metadata)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 wizardId) returns()
func (_WizardGuild *WizardGuildTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, wizardId *big.Int) (*types.Transaction, error) {
	return _WizardGuild.contract.Transact(opts, "transferFrom", from, to, wizardId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 wizardId) returns()
func (_WizardGuild *WizardGuildSession) TransferFrom(from common.Address, to common.Address, wizardId *big.Int) (*types.Transaction, error) {
	return _WizardGuild.Contract.TransferFrom(&_WizardGuild.TransactOpts, from, to, wizardId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 wizardId) returns()
func (_WizardGuild *WizardGuildTransactorSession) TransferFrom(from common.Address, to common.Address, wizardId *big.Int) (*types.Transaction, error) {
	return _WizardGuild.Contract.TransferFrom(&_WizardGuild.TransactOpts, from, to, wizardId)
}

// WizardGuildApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the WizardGuild contract.
type WizardGuildApprovalIterator struct {
	Event *WizardGuildApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WizardGuildApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WizardGuildApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WizardGuildApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WizardGuildApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WizardGuildApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WizardGuildApproval represents a Approval event raised by the WizardGuild contract.
type WizardGuildApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_WizardGuild *WizardGuildFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*WizardGuildApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _WizardGuild.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &WizardGuildApprovalIterator{contract: _WizardGuild.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_WizardGuild *WizardGuildFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *WizardGuildApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _WizardGuild.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WizardGuildApproval)
				if err := _WizardGuild.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_WizardGuild *WizardGuildFilterer) ParseApproval(log types.Log) (*WizardGuildApproval, error) {
	event := new(WizardGuildApproval)
	if err := _WizardGuild.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	return event, nil
}

// WizardGuildApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the WizardGuild contract.
type WizardGuildApprovalForAllIterator struct {
	Event *WizardGuildApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WizardGuildApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WizardGuildApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WizardGuildApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WizardGuildApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WizardGuildApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WizardGuildApprovalForAll represents a ApprovalForAll event raised by the WizardGuild contract.
type WizardGuildApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_WizardGuild *WizardGuildFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*WizardGuildApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _WizardGuild.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &WizardGuildApprovalForAllIterator{contract: _WizardGuild.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_WizardGuild *WizardGuildFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *WizardGuildApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _WizardGuild.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WizardGuildApprovalForAll)
				if err := _WizardGuild.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_WizardGuild *WizardGuildFilterer) ParseApprovalForAll(log types.Log) (*WizardGuildApprovalForAll, error) {
	event := new(WizardGuildApprovalForAll)
	if err := _WizardGuild.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	return event, nil
}

// WizardGuildCEOTransferredIterator is returned from FilterCEOTransferred and is used to iterate over the raw logs and unpacked data for CEOTransferred events raised by the WizardGuild contract.
type WizardGuildCEOTransferredIterator struct {
	Event *WizardGuildCEOTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WizardGuildCEOTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WizardGuildCEOTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WizardGuildCEOTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WizardGuildCEOTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WizardGuildCEOTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WizardGuildCEOTransferred represents a CEOTransferred event raised by the WizardGuild contract.
type WizardGuildCEOTransferred struct {
	PreviousCeo common.Address
	NewCeo      common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterCEOTransferred is a free log retrieval operation binding the contract event 0x9d05f170f1d545b1aa21c4a4f79f17ff737f5f020ea1b333d88f29f0bbfa9fc6.
//
// Solidity: event CEOTransferred(address previousCeo, address newCeo)
func (_WizardGuild *WizardGuildFilterer) FilterCEOTransferred(opts *bind.FilterOpts) (*WizardGuildCEOTransferredIterator, error) {

	logs, sub, err := _WizardGuild.contract.FilterLogs(opts, "CEOTransferred")
	if err != nil {
		return nil, err
	}
	return &WizardGuildCEOTransferredIterator{contract: _WizardGuild.contract, event: "CEOTransferred", logs: logs, sub: sub}, nil
}

// WatchCEOTransferred is a free log subscription operation binding the contract event 0x9d05f170f1d545b1aa21c4a4f79f17ff737f5f020ea1b333d88f29f0bbfa9fc6.
//
// Solidity: event CEOTransferred(address previousCeo, address newCeo)
func (_WizardGuild *WizardGuildFilterer) WatchCEOTransferred(opts *bind.WatchOpts, sink chan<- *WizardGuildCEOTransferred) (event.Subscription, error) {

	logs, sub, err := _WizardGuild.contract.WatchLogs(opts, "CEOTransferred")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WizardGuildCEOTransferred)
				if err := _WizardGuild.contract.UnpackLog(event, "CEOTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCEOTransferred is a log parse operation binding the contract event 0x9d05f170f1d545b1aa21c4a4f79f17ff737f5f020ea1b333d88f29f0bbfa9fc6.
//
// Solidity: event CEOTransferred(address previousCeo, address newCeo)
func (_WizardGuild *WizardGuildFilterer) ParseCEOTransferred(log types.Log) (*WizardGuildCEOTransferred, error) {
	event := new(WizardGuildCEOTransferred)
	if err := _WizardGuild.contract.UnpackLog(event, "CEOTransferred", log); err != nil {
		return nil, err
	}
	return event, nil
}

// WizardGuildCFOTransferredIterator is returned from FilterCFOTransferred and is used to iterate over the raw logs and unpacked data for CFOTransferred events raised by the WizardGuild contract.
type WizardGuildCFOTransferredIterator struct {
	Event *WizardGuildCFOTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WizardGuildCFOTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WizardGuildCFOTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WizardGuildCFOTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WizardGuildCFOTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WizardGuildCFOTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WizardGuildCFOTransferred represents a CFOTransferred event raised by the WizardGuild contract.
type WizardGuildCFOTransferred struct {
	PreviousCfo common.Address
	NewCfo      common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterCFOTransferred is a free log retrieval operation binding the contract event 0xe1033d3cc535efc343c53636bdc05c52a44d9e70b089d4ad6e974379f2c651d6.
//
// Solidity: event CFOTransferred(address previousCfo, address newCfo)
func (_WizardGuild *WizardGuildFilterer) FilterCFOTransferred(opts *bind.FilterOpts) (*WizardGuildCFOTransferredIterator, error) {

	logs, sub, err := _WizardGuild.contract.FilterLogs(opts, "CFOTransferred")
	if err != nil {
		return nil, err
	}
	return &WizardGuildCFOTransferredIterator{contract: _WizardGuild.contract, event: "CFOTransferred", logs: logs, sub: sub}, nil
}

// WatchCFOTransferred is a free log subscription operation binding the contract event 0xe1033d3cc535efc343c53636bdc05c52a44d9e70b089d4ad6e974379f2c651d6.
//
// Solidity: event CFOTransferred(address previousCfo, address newCfo)
func (_WizardGuild *WizardGuildFilterer) WatchCFOTransferred(opts *bind.WatchOpts, sink chan<- *WizardGuildCFOTransferred) (event.Subscription, error) {

	logs, sub, err := _WizardGuild.contract.WatchLogs(opts, "CFOTransferred")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WizardGuildCFOTransferred)
				if err := _WizardGuild.contract.UnpackLog(event, "CFOTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCFOTransferred is a log parse operation binding the contract event 0xe1033d3cc535efc343c53636bdc05c52a44d9e70b089d4ad6e974379f2c651d6.
//
// Solidity: event CFOTransferred(address previousCfo, address newCfo)
func (_WizardGuild *WizardGuildFilterer) ParseCFOTransferred(log types.Log) (*WizardGuildCFOTransferred, error) {
	event := new(WizardGuildCFOTransferred)
	if err := _WizardGuild.contract.UnpackLog(event, "CFOTransferred", log); err != nil {
		return nil, err
	}
	return event, nil
}

// WizardGuildCOOTransferredIterator is returned from FilterCOOTransferred and is used to iterate over the raw logs and unpacked data for COOTransferred events raised by the WizardGuild contract.
type WizardGuildCOOTransferredIterator struct {
	Event *WizardGuildCOOTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WizardGuildCOOTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WizardGuildCOOTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WizardGuildCOOTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WizardGuildCOOTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WizardGuildCOOTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WizardGuildCOOTransferred represents a COOTransferred event raised by the WizardGuild contract.
type WizardGuildCOOTransferred struct {
	PreviousCoo common.Address
	NewCoo      common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterCOOTransferred is a free log retrieval operation binding the contract event 0x1cd3afc04e6ae479d2b9f74533351b52218c5b2ae4f847f681a5eac514fe1184.
//
// Solidity: event COOTransferred(address previousCoo, address newCoo)
func (_WizardGuild *WizardGuildFilterer) FilterCOOTransferred(opts *bind.FilterOpts) (*WizardGuildCOOTransferredIterator, error) {

	logs, sub, err := _WizardGuild.contract.FilterLogs(opts, "COOTransferred")
	if err != nil {
		return nil, err
	}
	return &WizardGuildCOOTransferredIterator{contract: _WizardGuild.contract, event: "COOTransferred", logs: logs, sub: sub}, nil
}

// WatchCOOTransferred is a free log subscription operation binding the contract event 0x1cd3afc04e6ae479d2b9f74533351b52218c5b2ae4f847f681a5eac514fe1184.
//
// Solidity: event COOTransferred(address previousCoo, address newCoo)
func (_WizardGuild *WizardGuildFilterer) WatchCOOTransferred(opts *bind.WatchOpts, sink chan<- *WizardGuildCOOTransferred) (event.Subscription, error) {

	logs, sub, err := _WizardGuild.contract.WatchLogs(opts, "COOTransferred")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WizardGuildCOOTransferred)
				if err := _WizardGuild.contract.UnpackLog(event, "COOTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCOOTransferred is a log parse operation binding the contract event 0x1cd3afc04e6ae479d2b9f74533351b52218c5b2ae4f847f681a5eac514fe1184.
//
// Solidity: event COOTransferred(address previousCoo, address newCoo)
func (_WizardGuild *WizardGuildFilterer) ParseCOOTransferred(log types.Log) (*WizardGuildCOOTransferred, error) {
	event := new(WizardGuildCOOTransferred)
	if err := _WizardGuild.contract.UnpackLog(event, "COOTransferred", log); err != nil {
		return nil, err
	}
	return event, nil
}

// WizardGuildMetadataSetIterator is returned from FilterMetadataSet and is used to iterate over the raw logs and unpacked data for MetadataSet events raised by the WizardGuild contract.
type WizardGuildMetadataSetIterator struct {
	Event *WizardGuildMetadataSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WizardGuildMetadataSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WizardGuildMetadataSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WizardGuildMetadataSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WizardGuildMetadataSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WizardGuildMetadataSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WizardGuildMetadataSet represents a MetadataSet event raised by the WizardGuild contract.
type WizardGuildMetadataSet struct {
	WizardId *big.Int
	Metadata [32]byte
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterMetadataSet is a free log retrieval operation binding the contract event 0xf6812173c9728bd3bab2f1a94129341e47af8b8b78e2da481f8c45659d2d59eb.
//
// Solidity: event MetadataSet(uint256 indexed wizardId, bytes32 metadata)
func (_WizardGuild *WizardGuildFilterer) FilterMetadataSet(opts *bind.FilterOpts, wizardId []*big.Int) (*WizardGuildMetadataSetIterator, error) {

	var wizardIdRule []interface{}
	for _, wizardIdItem := range wizardId {
		wizardIdRule = append(wizardIdRule, wizardIdItem)
	}

	logs, sub, err := _WizardGuild.contract.FilterLogs(opts, "MetadataSet", wizardIdRule)
	if err != nil {
		return nil, err
	}
	return &WizardGuildMetadataSetIterator{contract: _WizardGuild.contract, event: "MetadataSet", logs: logs, sub: sub}, nil
}

// WatchMetadataSet is a free log subscription operation binding the contract event 0xf6812173c9728bd3bab2f1a94129341e47af8b8b78e2da481f8c45659d2d59eb.
//
// Solidity: event MetadataSet(uint256 indexed wizardId, bytes32 metadata)
func (_WizardGuild *WizardGuildFilterer) WatchMetadataSet(opts *bind.WatchOpts, sink chan<- *WizardGuildMetadataSet, wizardId []*big.Int) (event.Subscription, error) {

	var wizardIdRule []interface{}
	for _, wizardIdItem := range wizardId {
		wizardIdRule = append(wizardIdRule, wizardIdItem)
	}

	logs, sub, err := _WizardGuild.contract.WatchLogs(opts, "MetadataSet", wizardIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WizardGuildMetadataSet)
				if err := _WizardGuild.contract.UnpackLog(event, "MetadataSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMetadataSet is a log parse operation binding the contract event 0xf6812173c9728bd3bab2f1a94129341e47af8b8b78e2da481f8c45659d2d59eb.
//
// Solidity: event MetadataSet(uint256 indexed wizardId, bytes32 metadata)
func (_WizardGuild *WizardGuildFilterer) ParseMetadataSet(log types.Log) (*WizardGuildMetadataSet, error) {
	event := new(WizardGuildMetadataSet)
	if err := _WizardGuild.contract.UnpackLog(event, "MetadataSet", log); err != nil {
		return nil, err
	}
	return event, nil
}

// WizardGuildSeriesCloseIterator is returned from FilterSeriesClose and is used to iterate over the raw logs and unpacked data for SeriesClose events raised by the WizardGuild contract.
type WizardGuildSeriesCloseIterator struct {
	Event *WizardGuildSeriesClose // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WizardGuildSeriesCloseIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WizardGuildSeriesClose)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WizardGuildSeriesClose)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WizardGuildSeriesCloseIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WizardGuildSeriesCloseIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WizardGuildSeriesClose represents a SeriesClose event raised by the WizardGuild contract.
type WizardGuildSeriesClose struct {
	SeriesIndex uint64
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterSeriesClose is a free log retrieval operation binding the contract event 0x05ba38dc3f1ba4a8bd95dbf51dd0f0141267df538cdd31a01819e9929acdce0d.
//
// Solidity: event SeriesClose(uint64 seriesIndex)
func (_WizardGuild *WizardGuildFilterer) FilterSeriesClose(opts *bind.FilterOpts) (*WizardGuildSeriesCloseIterator, error) {

	logs, sub, err := _WizardGuild.contract.FilterLogs(opts, "SeriesClose")
	if err != nil {
		return nil, err
	}
	return &WizardGuildSeriesCloseIterator{contract: _WizardGuild.contract, event: "SeriesClose", logs: logs, sub: sub}, nil
}

// WatchSeriesClose is a free log subscription operation binding the contract event 0x05ba38dc3f1ba4a8bd95dbf51dd0f0141267df538cdd31a01819e9929acdce0d.
//
// Solidity: event SeriesClose(uint64 seriesIndex)
func (_WizardGuild *WizardGuildFilterer) WatchSeriesClose(opts *bind.WatchOpts, sink chan<- *WizardGuildSeriesClose) (event.Subscription, error) {

	logs, sub, err := _WizardGuild.contract.WatchLogs(opts, "SeriesClose")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WizardGuildSeriesClose)
				if err := _WizardGuild.contract.UnpackLog(event, "SeriesClose", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSeriesClose is a log parse operation binding the contract event 0x05ba38dc3f1ba4a8bd95dbf51dd0f0141267df538cdd31a01819e9929acdce0d.
//
// Solidity: event SeriesClose(uint64 seriesIndex)
func (_WizardGuild *WizardGuildFilterer) ParseSeriesClose(log types.Log) (*WizardGuildSeriesClose, error) {
	event := new(WizardGuildSeriesClose)
	if err := _WizardGuild.contract.UnpackLog(event, "SeriesClose", log); err != nil {
		return nil, err
	}
	return event, nil
}

// WizardGuildSeriesOpenIterator is returned from FilterSeriesOpen and is used to iterate over the raw logs and unpacked data for SeriesOpen events raised by the WizardGuild contract.
type WizardGuildSeriesOpenIterator struct {
	Event *WizardGuildSeriesOpen // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WizardGuildSeriesOpenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WizardGuildSeriesOpen)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WizardGuildSeriesOpen)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WizardGuildSeriesOpenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WizardGuildSeriesOpenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WizardGuildSeriesOpen represents a SeriesOpen event raised by the WizardGuild contract.
type WizardGuildSeriesOpen struct {
	SeriesIndex uint64
	ReservedIds *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterSeriesOpen is a free log retrieval operation binding the contract event 0x5be5961d909b3736a7b784a2d25cea0eb131c6c34ccdf94b2a376819c258ec8a.
//
// Solidity: event SeriesOpen(uint64 seriesIndex, uint256 reservedIds)
func (_WizardGuild *WizardGuildFilterer) FilterSeriesOpen(opts *bind.FilterOpts) (*WizardGuildSeriesOpenIterator, error) {

	logs, sub, err := _WizardGuild.contract.FilterLogs(opts, "SeriesOpen")
	if err != nil {
		return nil, err
	}
	return &WizardGuildSeriesOpenIterator{contract: _WizardGuild.contract, event: "SeriesOpen", logs: logs, sub: sub}, nil
}

// WatchSeriesOpen is a free log subscription operation binding the contract event 0x5be5961d909b3736a7b784a2d25cea0eb131c6c34ccdf94b2a376819c258ec8a.
//
// Solidity: event SeriesOpen(uint64 seriesIndex, uint256 reservedIds)
func (_WizardGuild *WizardGuildFilterer) WatchSeriesOpen(opts *bind.WatchOpts, sink chan<- *WizardGuildSeriesOpen) (event.Subscription, error) {

	logs, sub, err := _WizardGuild.contract.WatchLogs(opts, "SeriesOpen")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WizardGuildSeriesOpen)
				if err := _WizardGuild.contract.UnpackLog(event, "SeriesOpen", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSeriesOpen is a log parse operation binding the contract event 0x5be5961d909b3736a7b784a2d25cea0eb131c6c34ccdf94b2a376819c258ec8a.
//
// Solidity: event SeriesOpen(uint64 seriesIndex, uint256 reservedIds)
func (_WizardGuild *WizardGuildFilterer) ParseSeriesOpen(log types.Log) (*WizardGuildSeriesOpen, error) {
	event := new(WizardGuildSeriesOpen)
	if err := _WizardGuild.contract.UnpackLog(event, "SeriesOpen", log); err != nil {
		return nil, err
	}
	return event, nil
}

// WizardGuildTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the WizardGuild contract.
type WizardGuildTransferIterator struct {
	Event *WizardGuildTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WizardGuildTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WizardGuildTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WizardGuildTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WizardGuildTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WizardGuildTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WizardGuildTransfer represents a Transfer event raised by the WizardGuild contract.
type WizardGuildTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_WizardGuild *WizardGuildFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*WizardGuildTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _WizardGuild.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &WizardGuildTransferIterator{contract: _WizardGuild.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_WizardGuild *WizardGuildFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *WizardGuildTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _WizardGuild.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WizardGuildTransfer)
				if err := _WizardGuild.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_WizardGuild *WizardGuildFilterer) ParseTransfer(log types.Log) (*WizardGuildTransfer, error) {
	event := new(WizardGuildTransfer)
	if err := _WizardGuild.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	return event, nil
}

// WizardGuildWizardAffinityAssignedIterator is returned from FilterWizardAffinityAssigned and is used to iterate over the raw logs and unpacked data for WizardAffinityAssigned events raised by the WizardGuild contract.
type WizardGuildWizardAffinityAssignedIterator struct {
	Event *WizardGuildWizardAffinityAssigned // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WizardGuildWizardAffinityAssignedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WizardGuildWizardAffinityAssigned)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WizardGuildWizardAffinityAssigned)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WizardGuildWizardAffinityAssignedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WizardGuildWizardAffinityAssignedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WizardGuildWizardAffinityAssigned represents a WizardAffinityAssigned event raised by the WizardGuild contract.
type WizardGuildWizardAffinityAssigned struct {
	WizardId *big.Int
	Affinity uint8
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterWizardAffinityAssigned is a free log retrieval operation binding the contract event 0xef597ca22f25aec904866c3228f39dd59d3bc8345b8fd3cbea7ce568c5b1b22a.
//
// Solidity: event WizardAffinityAssigned(uint256 wizardId, uint8 affinity)
func (_WizardGuild *WizardGuildFilterer) FilterWizardAffinityAssigned(opts *bind.FilterOpts) (*WizardGuildWizardAffinityAssignedIterator, error) {

	logs, sub, err := _WizardGuild.contract.FilterLogs(opts, "WizardAffinityAssigned")
	if err != nil {
		return nil, err
	}
	return &WizardGuildWizardAffinityAssignedIterator{contract: _WizardGuild.contract, event: "WizardAffinityAssigned", logs: logs, sub: sub}, nil
}

// WatchWizardAffinityAssigned is a free log subscription operation binding the contract event 0xef597ca22f25aec904866c3228f39dd59d3bc8345b8fd3cbea7ce568c5b1b22a.
//
// Solidity: event WizardAffinityAssigned(uint256 wizardId, uint8 affinity)
func (_WizardGuild *WizardGuildFilterer) WatchWizardAffinityAssigned(opts *bind.WatchOpts, sink chan<- *WizardGuildWizardAffinityAssigned) (event.Subscription, error) {

	logs, sub, err := _WizardGuild.contract.WatchLogs(opts, "WizardAffinityAssigned")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WizardGuildWizardAffinityAssigned)
				if err := _WizardGuild.contract.UnpackLog(event, "WizardAffinityAssigned", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWizardAffinityAssigned is a log parse operation binding the contract event 0xef597ca22f25aec904866c3228f39dd59d3bc8345b8fd3cbea7ce568c5b1b22a.
//
// Solidity: event WizardAffinityAssigned(uint256 wizardId, uint8 affinity)
func (_WizardGuild *WizardGuildFilterer) ParseWizardAffinityAssigned(log types.Log) (*WizardGuildWizardAffinityAssigned, error) {
	event := new(WizardGuildWizardAffinityAssigned)
	if err := _WizardGuild.contract.UnpackLog(event, "WizardAffinityAssigned", log); err != nil {
		return nil, err
	}
	return event, nil
}

// WizardGuildWizardConjuredIterator is returned from FilterWizardConjured and is used to iterate over the raw logs and unpacked data for WizardConjured events raised by the WizardGuild contract.
type WizardGuildWizardConjuredIterator struct {
	Event *WizardGuildWizardConjured // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WizardGuildWizardConjuredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WizardGuildWizardConjured)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WizardGuildWizardConjured)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WizardGuildWizardConjuredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WizardGuildWizardConjuredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WizardGuildWizardConjured represents a WizardConjured event raised by the WizardGuild contract.
type WizardGuildWizardConjured struct {
	WizardId    *big.Int
	Affinity    uint8
	InnatePower *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterWizardConjured is a free log retrieval operation binding the contract event 0x3b7fcf44666972972487f1ac302bef03ee0d35027387ba8a897207466a081725.
//
// Solidity: event WizardConjured(uint256 wizardId, uint8 affinity, uint256 innatePower)
func (_WizardGuild *WizardGuildFilterer) FilterWizardConjured(opts *bind.FilterOpts) (*WizardGuildWizardConjuredIterator, error) {

	logs, sub, err := _WizardGuild.contract.FilterLogs(opts, "WizardConjured")
	if err != nil {
		return nil, err
	}
	return &WizardGuildWizardConjuredIterator{contract: _WizardGuild.contract, event: "WizardConjured", logs: logs, sub: sub}, nil
}

// WatchWizardConjured is a free log subscription operation binding the contract event 0x3b7fcf44666972972487f1ac302bef03ee0d35027387ba8a897207466a081725.
//
// Solidity: event WizardConjured(uint256 wizardId, uint8 affinity, uint256 innatePower)
func (_WizardGuild *WizardGuildFilterer) WatchWizardConjured(opts *bind.WatchOpts, sink chan<- *WizardGuildWizardConjured) (event.Subscription, error) {

	logs, sub, err := _WizardGuild.contract.WatchLogs(opts, "WizardConjured")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WizardGuildWizardConjured)
				if err := _WizardGuild.contract.UnpackLog(event, "WizardConjured", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWizardConjured is a log parse operation binding the contract event 0x3b7fcf44666972972487f1ac302bef03ee0d35027387ba8a897207466a081725.
//
// Solidity: event WizardConjured(uint256 wizardId, uint8 affinity, uint256 innatePower)
func (_WizardGuild *WizardGuildFilterer) ParseWizardConjured(log types.Log) (*WizardGuildWizardConjured, error) {
	event := new(WizardGuildWizardConjured)
	if err := _WizardGuild.contract.UnpackLog(event, "WizardConjured", log); err != nil {
		return nil, err
	}
	return event, nil
}
