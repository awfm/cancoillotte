// (c) 2019 Max Wolter - ALL RIGHTS RESERVED

package bindings

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// WizardPresaleABI is the input ABI used to generate the binding from.
const WizardPresaleABI = "[{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"startingCost\",\"type\":\"uint128\"},{\"internalType\":\"uint16\",\"name\":\"costIncremement\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"exclusiveCount\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"startBlock\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"duration\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldStartBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStartBlock\",\"type\":\"uint256\"}],\"name\":\"StartBlockChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"element\",\"type\":\"uint8\"}],\"name\":\"WizardAlignmentAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"element\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"power\",\"type\":\"uint256\"}],\"name\":\"WizardSummoned\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"_INTERFACE_ID_WIZARDPRESALE\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_wizardsById\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"affinity\",\"type\":\"uint8\"},{\"internalType\":\"uint88\",\"name\":\"power\",\"type\":\"uint88\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"absorbWizard\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"power\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"affinity\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"absorbWizardMulti\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"powers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"affinities\",\"type\":\"uint8[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"affinity\",\"type\":\"uint8\"}],\"name\":\"conjureExclusiveWizard\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"powers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"affinities\",\"type\":\"uint8[]\"}],\"name\":\"conjureExclusiveWizardMulti\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"affinity\",\"type\":\"uint8\"}],\"name\":\"conjureWizard\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"wizardId\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"affinities\",\"type\":\"uint8[]\"}],\"name\":\"conjureWizardMulti\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"wizardIds\",\"type\":\"uint256[]\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"name\":\"costToPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"power\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"elementalWizardCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"elementalWizardIncrement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gatekeeper\",\"outputs\":[{\"internalType\":\"addresspayable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getWizard\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"power\",\"type\":\"uint88\"},{\"internalType\":\"uint8\",\"name\":\"affinity\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"guildmaster\",\"outputs\":[{\"internalType\":\"addresspayable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isDuringSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxExclusives\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"neutralWizardCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextWizardId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"newStart\",\"type\":\"uint128\"}],\"name\":\"postponeSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"power\",\"type\":\"uint256\"}],\"name\":\"powerToCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"affinity\",\"type\":\"uint8\"}],\"name\":\"safeConjureExclusiveWizard\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleStartBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wizardId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"newAffinity\",\"type\":\"uint8\"}],\"name\":\"setAffinity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"gc\",\"type\":\"address\"}],\"name\":\"setGatekeeper\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// WizardPresaleFuncSigs maps the 4-byte function signature to its string representation.
var WizardPresaleFuncSigs = map[string]string{
	"8ef0da6f": "_INTERFACE_ID_WIZARDPRESALE()",
	"63f3ce31": "_wizardsById(uint256)",
	"a7847c3a": "absorbWizard(uint256)",
	"476c4a5e": "absorbWizardMulti(uint256[])",
	"095ea7b3": "approve(address,uint256)",
	"70a08231": "balanceOf(address)",
	"795cfa9b": "conjureExclusiveWizard(uint256,address,uint8)",
	"ffc0b9ad": "conjureExclusiveWizardMulti(uint256[],address[],uint256[],uint8[])",
	"573f322f": "conjureWizard(uint8)",
	"ce6991fd": "conjureWizardMulti(uint8[])",
	"e5a604bf": "costToPower(uint256)",
	"83197ef0": "destroy()",
	"ec8cd3ce": "elementalWizardCost()",
	"2447aee9": "elementalWizardIncrement()",
	"a59c9c27": "gatekeeper()",
	"081812fc": "getApproved(uint256)",
	"fac8eafc": "getWizard(uint256)",
	"7f7ca38e": "guildmaster()",
	"e985e9c5": "isApprovedForAll(address,address)",
	"6de9b6d8": "isDuringSale()",
	"9b025025": "maxExclusives()",
	"8be7310c": "neutralWizardCost()",
	"dc9f1cdd": "nextWizardId()",
	"6352211e": "ownerOf(uint256)",
	"565ca6dd": "postponeSale(uint128)",
	"48b92c20": "powerToCost(uint256)",
	"f1cb5606": "safeConjureExclusiveWizard(uint256,address,uint8)",
	"42842e0e": "safeTransferFrom(address,address,uint256)",
	"b88d4fde": "safeTransferFrom(address,address,uint256,bytes)",
	"3711d9fb": "saleDuration()",
	"20027275": "saleStartBlock()",
	"98d7a414": "setAffinity(uint256,uint8)",
	"a22cb465": "setApprovalForAll(address,bool)",
	"fbb97956": "setGatekeeper(address)",
	"01ffc9a7": "supportsInterface(bytes4)",
	"23b872dd": "transferFrom(address,address,uint256)",
}

// WizardPresaleBin is the compiled bytecode used for deploying new contracts.
var WizardPresaleBin = "0x60806040523480156200001157600080fd5b5060405162002e7138038062002e71833981810160405260a08110156200003757600080fd5b508051602082015160408301516060840151608090940151929391929091906200008a7f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03620001a416565b620000be7f80ac58cd000000000000000000000000000000000000000000000000000000006001600160e01b03620001a416565b43826001600160801b03161162000121576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602881526020018062002e496028913960400191505060405180910390fd5b600580546001600160a01b031916331790556001600160801b038083166006558181166007558516600881905560095561ffff8416600a55600b83905560018301600c55620001997f4df71efb000000000000000000000000000000000000000000000000000000006001600160e01b03620001a416565b505050505062000211565b7fffffffff000000000000000000000000000000000000000000000000000000008082161415620001d457600080fd5b7fffffffff00000000000000000000000000000000000000000000000000000000166000908152602081905260409020805460ff19166001179055565b612c2880620002216000396000f3fe60806040526004361061020f5760003560e01c806383197ef011610118578063ce6991fd116100a0578063ec8cd3ce1161006f578063ec8cd3ce146109f5578063f1cb560614610a0a578063fac8eafc14610a3f578063fbb9795614610a9c578063ffc0b9ad14610acf5761020f565b8063ce6991fd146108bd578063dc9f1cdd1461097b578063e5a604bf14610990578063e985e9c5146109ba5761020f565b80639b025025116100e75780639b02502514610732578063a22cb46514610747578063a59c9c2714610782578063a7847c3a14610797578063b88d4fde146107ec5761020f565b806383197ef0146106a35780638be7310c146106b85780638ef0da6f146106cd57806398d7a414146106ff5761020f565b806348b92c201161019b57806363f3ce311161016a57806363f3ce31146105b45780636de9b6d81461061157806370a0823114610626578063795cfa9b146106595780637f7ca38e1461068e5761020f565b806348b92c201461050d578063565ca6dd14610537578063573f322f1461056a5780636352211e1461058a5761020f565b806323b872dd116101e257806323b872dd146103045780632447aee9146103475780633711d9fb1461035c57806342842e0e14610371578063476c4a5e146103b45761020f565b806301ffc9a714610214578063081812fc1461025c578063095ea7b3146102a257806320027275146102dd575b600080fd5b34801561022057600080fd5b506102486004803603602081101561023757600080fd5b50356001600160e01b031916610c2d565b604080519115158252519081900360200190f35b34801561026857600080fd5b506102866004803603602081101561027f57600080fd5b5035610c4c565b604080516001600160a01b039092168252519081900360200190f35b3480156102ae57600080fd5b506102db600480360360408110156102c557600080fd5b506001600160a01b038135169060200135610cae565b005b3480156102e957600080fd5b506102f2610dbf565b60408051918252519081900360200190f35b34801561031057600080fd5b506102db6004803603606081101561032757600080fd5b506001600160a01b03813581169160208101359091169060400135610dc5565b34801561035357600080fd5b506102f2610e1a565b34801561036857600080fd5b506102f2610e20565b34801561037d57600080fd5b506102db6004803603606081101561039457600080fd5b506001600160a01b03813581169160208101359091169060400135610e26565b3480156103c057600080fd5b5061042f600480360360208110156103d757600080fd5b810190602081018135600160201b8111156103f157600080fd5b82018360208201111561040357600080fd5b803590602001918460208302840111600160201b8311171561042457600080fd5b509092509050610e41565b60405180806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b8381101561047757818101518382015260200161045f565b50505050905001848103835286818151815260200191508051906020019060200280838360005b838110156104b657818101518382015260200161049e565b50505050905001848103825285818151815260200191508051906020019060200280838360005b838110156104f55781810151838201526020016104dd565b50505050905001965050505050505060405180910390f35b34801561051957600080fd5b506102f26004803603602081101561053057600080fd5b5035611043565b34801561054357600080fd5b506102db6004803603602081101561055a57600080fd5b50356001600160801b031661104a565b6102f26004803603602081101561058057600080fd5b503560ff1661117b565b34801561059657600080fd5b50610286600480360360208110156105ad57600080fd5b50356112f5565b3480156105c057600080fd5b506105de600480360360208110156105d757600080fd5b5035611356565b6040805160ff90941684526001600160581b0390921660208401526001600160a01b031682820152519081900360600190f35b34801561061d57600080fd5b5061024861138c565b34801561063257600080fd5b506102f26004803603602081101561064957600080fd5b50356001600160a01b03166113aa565b6102db6004803603606081101561066f57600080fd5b5080359060208101356001600160a01b0316906040013560ff1661140d565b34801561069a57600080fd5b506102866114d0565b3480156106af57600080fd5b506102db6114df565b3480156106c457600080fd5b506102f2611542565b3480156106d957600080fd5b506106e2611548565b604080516001600160e01b03199092168252519081900360200190f35b34801561070b57600080fd5b506102db6004803603604081101561072257600080fd5b508035906020013560ff16611553565b34801561073e57600080fd5b506102f26116cb565b34801561075357600080fd5b506102db6004803603604081101561076a57600080fd5b506001600160a01b03813516906020013515156116d1565b34801561078e57600080fd5b5061028661179d565b3480156107a357600080fd5b506107c1600480360360208110156107ba57600080fd5b50356117ac565b604080516001600160a01b039094168452602084019290925260ff1682820152519081900360600190f35b3480156107f857600080fd5b506102db6004803603608081101561080f57600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b81111561084957600080fd5b82018360208201111561085b57600080fd5b803590602001918460018302840111600160201b8311171561087c57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611867945050505050565b61092b600480360360208110156108d357600080fd5b810190602081018135600160201b8111156108ed57600080fd5b8201836020820111156108ff57600080fd5b803590602001918460208302840111600160201b8311171561092057600080fd5b5090925090506118bf565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561096757818101518382015260200161094f565b505050509050019250505060405180910390f35b34801561098757600080fd5b506102f2611ba9565b34801561099c57600080fd5b506102f2600480360360208110156109b357600080fd5b5035611baf565b3480156109c657600080fd5b50610248600480360360408110156109dd57600080fd5b506001600160a01b0381358116916020013516611bb7565b348015610a0157600080fd5b506102f2611be5565b6102db60048036036060811015610a2057600080fd5b5080359060208101356001600160a01b0316906040013560ff16611beb565b348015610a4b57600080fd5b50610a6960048036036020811015610a6257600080fd5b5035611cae565b604080516001600160a01b0390941684526001600160581b03909216602084015260ff1682820152519081900360600190f35b348015610aa857600080fd5b506102db60048036036020811015610abf57600080fd5b50356001600160a01b0316611d5c565b6102db60048036036080811015610ae557600080fd5b810190602081018135600160201b811115610aff57600080fd5b820183602082011115610b1157600080fd5b803590602001918460208302840111600160201b83111715610b3257600080fd5b919390929091602081019035600160201b811115610b4f57600080fd5b820183602082011115610b6157600080fd5b803590602001918460208302840111600160201b83111715610b8257600080fd5b919390929091602081019035600160201b811115610b9f57600080fd5b820183602082011115610bb157600080fd5b803590602001918460208302840111600160201b83111715610bd257600080fd5b919390929091602081019035600160201b811115610bef57600080fd5b820183602082011115610c0157600080fd5b803590602001918460208302840111600160201b83111715610c2257600080fd5b509092509050611e2f565b6001600160e01b03191660009081526020819052604090205460ff1690565b6000610c57826120a5565b610c925760405162461bcd60e51b815260040180806020018281038252602c815260200180612a66602c913960400191505060405180910390fd5b506000908152600260205260409020546001600160a01b031690565b6000610cb9826112f5565b9050806001600160a01b0316836001600160a01b03161415610d0c5760405162461bcd60e51b8152600401808060200182810382526021815260200180612ae76021913960400191505060405180910390fd5b336001600160a01b0382161480610d285750610d288133611bb7565b610d635760405162461bcd60e51b81526004018080602001828103825260388152602001806129b86038913960400191505060405180910390fd5b60008281526002602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60065481565b610dcf33826120c9565b610e0a5760405162461bcd60e51b8152600401808060200182810382526031815260200180612b086031913960400191505060405180910390fd5b610e1583838361216d565b505050565b600a5481565b60075481565b610e1583838360405180602001604052806000815250611867565b600d54606090819081906001600160a01b03163314610e9c576040805162461bcd60e51b815260206004820152601260248201527126bab9ba1031329033b0ba32b5b2b2b832b960711b604482015290519081900360640190fd5b604080518581526020808702820101909152848015610ec5578160200160208202803883390190505b50604080518681526020808802820101909152909350848015610ef2578160200160208202803883390190505b50604080518681526020808802820101909152909250848015610f1f578160200160208202803883390190505b5090506000805b8581101561100c57610f49878783818110610f3d57fe5b90506020020135611cae565b816001600160581b03169150878481518110610f6157fe5b60200260200101878581518110610f7457fe5b60200260200101878681518110610f8757fe5b602002602001018360ff1660ff1681525083815250836001600160a01b03166001600160a01b0316815250505050610fe4858281518110610fc457fe5b6020026020010151888884818110610fd857fe5b9050602002013561229b565b611000848281518110610ff357fe5b6020026020010151611043565b90910190600101610f26565b50604051339082156108fc029083906000818181858888f1935050505015801561103a573d6000803e3d6000fd5b50509250925092565b6103e80290565b6005546001600160a01b0316331461109f576040805162461bcd60e51b815260206004820152601360248201527226bab9ba1031329033bab4b63236b0b9ba32b960691b604482015290519081900360640190fd5b60065443106110df5760405162461bcd60e51b815260040180806020018281038252603a815260200180612b93603a913960400191505060405180910390fd5b600654816001600160801b0316116111285760405162461bcd60e51b8152600401808060200182810382526035815260200180612b396035913960400191505060405180910390fd5b600654604080519182526001600160801b038316602083015280517f8774aa9221f02a7971c04902013456be92b6a521a2347a44ec6610e4b9a5d8fc9281900390910190a16001600160801b0316600655565b60006006544310156111c8576040805162461bcd60e51b815260206004820152601160248201527014d85b19481b9bdd081bdc195b881e595d607a1b604482015290519081900360640190fd5b600754600654014310611210576040805162461bcd60e51b815260206004820152600b60248201526a14d85b194818db1bdcd95960aa1b604482015290519081900360640190fd5b50600c8054600181019091556009546000906112319083903390869061235a565b600955905034811115611283576040805162461bcd60e51b81526020600482015260156024820152744e6f7420656e6f7567682065746820746f2070617960581b604482015290519081900360640190fd5b61128c816123f9565b6112a8600033846040518060200160405280600081525061243a565b6112ef576040805162461bcd60e51b81526020600482015260136024820152724d75737420737570706f72742065726337323160681b604482015290519081900360640190fd5b50919050565b600081815260016020526040812054600160601b90046001600160a01b0316806113505760405162461bcd60e51b8152600401808060200182810382526029815260200180612a3d6029913960400191505060405180910390fd5b92915050565b60016020526000908152604090205460ff81169061010081046001600160581b031690600160601b90046001600160a01b031683565b600060065443101580156113a557506007546006540143105b905090565b60006001600160a01b0382166113f15760405162461bcd60e51b815260040180806020018281038252602a815260200180612a13602a913960400191505060405180910390fd5b506001600160a01b031660009081526003602052604090205490565b6005546001600160a01b03163314611462576040805162461bcd60e51b815260206004820152601360248201527226bab9ba1031329033bab4b63236b0b9ba32b960691b604482015290519081900360640190fd5b6000831180156114745750600b548311155b6114bc576040805162461bcd60e51b8152602060048201526014602482015273125b9d985b1a5908195e18db1d5cda5d9948125160621b604482015290519081900360640190fd5b610e1583836114ca34611baf565b84612564565b6005546001600160a01b031681565b6005546001600160a01b03163314611534576040805162461bcd60e51b815260206004820152601360248201527226bab9ba1031329033bab4b63236b0b9ba32b960691b604482015290519081900360640190fd5b6005546001600160a01b0316ff5b60085481565b634df71efb60e01b81565b60ff8116158015906115695750600460ff821611155b6115ba576040805162461bcd60e51b815260206004820152601c60248201527f4d7573742063686f6f736520612076616c696420616666696e69747900000000604482015290519081900360640190fd5b6000806115c684611cae565b9250509150816001600160a01b0316336001600160a01b03161461161b5760405162461bcd60e51b81526004018080602001828103825260218152602001806128796021913960400191505060405180910390fd5b60ff811615611671576040805162461bcd60e51b815260206004820181905260248201527f416666696e6974792063616e206f6e6c792062652063686f73656e206f6e6365604482015290519081900360640190fd5b600084815260016020908152604091829020805460ff191660ff87169081179091558251908152915186927f0f0bc6913c78f45e890c2265a362fd955a202a954142552907cb83e4ef9f409a92908290030190a250505050565b600b5481565b6001600160a01b03821633141561172f576040805162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015290519081900360640190fd5b3360008181526004602090815260408083206001600160a01b03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b600d546001600160a01b031681565b600d54600090819081906001600160a01b03163314611807576040805162461bcd60e51b815260206004820152601260248201527126bab9ba1031329033b0ba32b5b2b2b832b960711b604482015290519081900360640190fd5b61181084611cae565b9194506001600160581b03169250905061182a838561229b565b336108fc61183784611043565b6040518115909202916000818181858888f1935050505015801561185f573d6000803e3d6000fd5b509193909250565b611872848484610dc5565b61187e8484848461243a565b6118b95760405162461bcd60e51b815260040180806020018281038252603281526020018061289a6032913960400191505060405180910390fd5b50505050565b606060065443101561190c576040805162461bcd60e51b815260206004820152601160248201527014d85b19481b9bdd081bdc195b881e595d607a1b604482015290519081900360640190fd5b600754600654014310611954576040805162461bcd60e51b815260206004820152600b60248201526a14d85b194818db1bdcd95960aa1b604482015290519081900360640190fd5b60408051838152602080850282010190915282801561197d578160200160208202803883390190505b50600c54600954919250600091825b858110156119f957828582815181106119a157fe5b602002602001018181525050828060010193505060006119eb8683815181106119c657fe5b6020026020010151338a8a868181106119db57fe5b9050602002013560ff168661235a565b95019492505060010161198c565b506009819055600c82905534831115611a51576040805162461bcd60e51b81526020600482015260156024820152744e6f7420656e6f7567682065746820746f2070617960581b604482015290519081900360640190fd5b611a5a33612815565b15611b975760005b8451811015611b95576000336001600160a01b031663150b7a02336000898681518110611a8b57fe5b60200260200101516040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b03168152602001836001600160a01b03166001600160a01b0316815260200182815260200180602001828103825260008152602001602001945050505050602060405180830381600087803b158015611b0f57600080fd5b505af1158015611b23573d6000803e3d6000fd5b505050506040513d6020811015611b3957600080fd5b505190506001600160e01b03198116630a85bd0160e11b14611b8c5760405162461bcd60e51b815260040180806020018281038252602c815260200180612abb602c913960400191505060405180910390fd5b50600101611a62565b505b611ba0836123f9565b50505092915050565b600c5481565b6103e8900490565b6001600160a01b03918216600090815260046020908152604080832093909416825291909152205460ff1690565b60095481565b6005546001600160a01b03163314611c40576040805162461bcd60e51b815260206004820152601360248201527226bab9ba1031329033bab4b63236b0b9ba32b960691b604482015290519081900360640190fd5b611c4b83838361140d565b611c67600083856040518060200160405280600081525061243a565b610e15576040805162461bcd60e51b81526020600482015260136024820152724d75737420737570706f72742065726337323160681b604482015290519081900360640190fd5b6000806000611cbb612858565b5050506000828152600160209081526040918290208251606081018452905460ff811680835261010082046001600160581b0316938301849052600160601b9091046001600160a01b03169382018490529293509091908361185f576040805162461bcd60e51b815260206004820152601560248201527415da5e985c9908191bd95cc81b9bdd08195e1a5cdd605a1b604482015290519081900360640190fd5b6005546001600160a01b03163314611db1576040805162461bcd60e51b815260206004820152601360248201527226bab9ba1031329033bab4b63236b0b9ba32b960691b604482015290519081900360640190fd5b600d546001600160a01b0316158015611dd257506001600160a01b03811615155b611e0d5760405162461bcd60e51b81526004018080602001828103825260238152602001806129f06023913960400191505060405180910390fd5b600d80546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b03163314611e84576040805162461bcd60e51b815260206004820152601360248201527226bab9ba1031329033bab4b63236b0b9ba32b960691b604482015290519081900360640190fd5b8685148015611e9257508483145b8015611e9d57508481145b611eee576040805162461bcd60e51b815260206004820152601d60248201527f4d757374206861766520657175616c206172726179206c656e67746873000000604482015290519081900360640190fd5b6000805b888110156120525760008a8a83818110611f0857fe5b90506020020135118015611f305750600b548a8a83818110611f2657fe5b9050602002013511155b611f78576040805162461bcd60e51b8152602060048201526014602482015273125b9d985b1a5908195e18db1d5cda5d9948125160621b604482015290519081900360640190fd5b6004848483818110611f8657fe5b9050602002013560ff1660ff161115611fd05760405162461bcd60e51b81526004018080602001828103825260268152602001806128cc6026913960400191505060405180910390fd5b6120308a8a83818110611fdf57fe5b90506020020135898984818110611ff257fe5b905060200201356001600160a01b031688888581811061200e57fe5b9050602002013587878681811061202157fe5b9050602002013560ff16612564565b85858281811061203c57fe5b6020029190910135929092019150600101611ef2565b503461205d82611043565b111561209a5760405162461bcd60e51b815260040180806020018281038252602181526020018061296c6021913960400191505060405180910390fd5b505050505050505050565b600090815260016020526040902054600160601b90046001600160a01b0316151590565b60006120d4826120a5565b61210f5760405162461bcd60e51b815260040180806020018281038252602c815260200180612940602c913960400191505060405180910390fd5b600061211a836112f5565b9050806001600160a01b0316846001600160a01b031614806121555750836001600160a01b031661214a84610c4c565b6001600160a01b0316145b8061216557506121658185611bb7565b949350505050565b826001600160a01b0316612180826112f5565b6001600160a01b0316146121c55760405162461bcd60e51b8152600401808060200182810382526029815260200180612a926029913960400191505060405180910390fd5b6001600160a01b03821661220a5760405162461bcd60e51b815260040180806020018281038252602481526020018061291c6024913960400191505060405180910390fd5b6122138161281b565b6001600160a01b03838116600081815260036020908152604080832080546000190190559386168083528483208054600190810190915586845290915283822080546bffffffffffffffffffffffff16600160601b83021790559251849392917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b816001600160a01b03166122ae826112f5565b6001600160a01b0316146122f35760405162461bcd60e51b8152600401808060200182810382526025815260200180612b6e6025913960400191505060405180910390fd5b6122fc8161281b565b6001600160a01b038216600081815260036020908152604080832080546000190190558483526001909152808220829055518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b60008060ff8416158015906123735750600460ff851611155b6123ae5760405162461bcd60e51b815260040180806020018281038252602a8152602001806128f2602a913960400191505060405180910390fd5b508160ff8416600114156123c65760085491506123dc565b809150620186a0600a548202816123d957fe5b04015b6123f086866123ea85611baf565b87612564565b94509492505050565b348190036125e43a0281111561243657604051339082156108fc029083906000818181858888f19350505050158015610e15573d6000803e3d6000fd5b5050565b600061244584612815565b61245157506001612165565b604051630a85bd0160e11b815233600482018181526001600160a01b03888116602485015260448401879052608060648501908152865160848601528651600095928a169463150b7a029490938c938b938b939260a4019060208501908083838e5b838110156124cb5781810151838201526020016124b3565b50505050905090810190601f1680156124f85780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561251a57600080fd5b505af115801561252e573d6000803e3d6000fd5b505050506040513d602081101561254457600080fd5b50516001600160e01b031916630a85bd0160e11b14915050949350505050565b61256d846120a5565b156125b7576040805162461bcd60e51b815260206004820152601560248201527410d85b89dd081c995d5cd94815da5e985c99081251605a1b604482015290519081900360640190fd5b6001600160a01b038316612612576040805162461bcd60e51b815260206004820152601860248201527f4f776e65722061646472657373206d7573742065786973740000000000000000604482015290519081900360640190fd5b60008211612667576040805162461bcd60e51b815260206004820152601a60248201527f57697a61726420706f776572206d757374206265206e6f6e2d30000000000000604482015290519081900360640190fd5b600160581b82106126a95760405162461bcd60e51b815260040180806020018281038252602b81526020018061298d602b913960400191505060405180910390fd5b600460ff82161115612702576040805162461bcd60e51b815260206004820152601a60248201527f496e76616c696420656c656d656e74616c20616666696e697479000000000000604482015290519081900360640190fd5b6040805160608101825260ff83811682526001600160581b0385811660208085019182526001600160a01b0389811686880181815260008d815260018086528a822099518a549751935160ff199098169916989098176bffffffffffffffffffffff0019166101009290971691909102959095176bffffffffffffffffffffffff16600160601b9490921693909302179094558082526003909352838120805490920190915591518692907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a46040805160ff8316815260208101849052815186927f7c0fbd69c04ea8ef6f62724eebd9c311d984e86457a801d81c0cb52ec9039170928290030190a250505050565b3b151590565b6000818152600260205260409020546001600160a01b03161561285557600081815260026020526040902080546001600160a01b03191690555b50565b60408051606081018252600080825260208201819052918101919091529056fe416666696e6974792063616e206f6e6c7920626520736574206279206f776e65724552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724d7573742063686f6f736520612076616c696420656c656d656e74616c20616666696e6974794e6f6e2d6578636c75736976652057697a61726473206e6565642061207265616c20616666696e6974794552433732313a207472616e7366657220746f20746865207a65726f20616464726573734552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e4d7573742070617920666f7220706f77657220696e20616c6c2057697a6172647357697a61726420706f776572206d7573742066697420696e2038382062697473206f662073746f726167654552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c43616e206f6e6c7920736574206f6e636520616e64206d757374206e6f7420626520304552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e436f6e7472616374206f776e6572206469646e27742061636365707420455243373231207472616e736665724552433732313a20617070726f76616c20746f2063757272656e74206f776e65724552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f7665644e65772073746172742074696d65206d757374206265206c61746572207468616e2070726576696f75732073746172742074696d654552433732313a206275726e206f6620746f6b656e2074686174206973206e6f74206f776e53616c652073746172742074696d65206f6e6c792061646a75737461626c65206265666f72652070726576696f75732073746172742074696d65a265627a7a72315820b20571e4410c96edc29c8e5c9a824fd315790e801fce84d07568aeef9929c48764736f6c637829302e352e31332d646576656c6f702e323031392e31302e31392b636f6d6d69742e643562326633343700595374617274206d7573742062652067726561746572207468616e2063757272656e7420626c6f636b"

// DeployWizardPresale deploys a new Ethereum contract, binding an instance of WizardPresale to it.
func DeployWizardPresale(auth *bind.TransactOpts, backend bind.ContractBackend, startingCost *big.Int, costIncremement uint16, exclusiveCount *big.Int, startBlock *big.Int, duration *big.Int) (common.Address, *types.Transaction, *WizardPresale, error) {
	parsed, err := abi.JSON(strings.NewReader(WizardPresaleABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(WizardPresaleBin), backend, startingCost, costIncremement, exclusiveCount, startBlock, duration)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &WizardPresale{WizardPresaleCaller: WizardPresaleCaller{contract: contract}, WizardPresaleTransactor: WizardPresaleTransactor{contract: contract}, WizardPresaleFilterer: WizardPresaleFilterer{contract: contract}}, nil
}

// WizardPresale is an auto generated Go binding around an Ethereum contract.
type WizardPresale struct {
	WizardPresaleCaller     // Read-only binding to the contract
	WizardPresaleTransactor // Write-only binding to the contract
	WizardPresaleFilterer   // Log filterer for contract events
}

// WizardPresaleCaller is an auto generated read-only Go binding around an Ethereum contract.
type WizardPresaleCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WizardPresaleTransactor is an auto generated write-only Go binding around an Ethereum contract.
type WizardPresaleTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WizardPresaleFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type WizardPresaleFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WizardPresaleSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type WizardPresaleSession struct {
	Contract     *WizardPresale    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// WizardPresaleCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type WizardPresaleCallerSession struct {
	Contract *WizardPresaleCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// WizardPresaleTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type WizardPresaleTransactorSession struct {
	Contract     *WizardPresaleTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// WizardPresaleRaw is an auto generated low-level Go binding around an Ethereum contract.
type WizardPresaleRaw struct {
	Contract *WizardPresale // Generic contract binding to access the raw methods on
}

// WizardPresaleCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type WizardPresaleCallerRaw struct {
	Contract *WizardPresaleCaller // Generic read-only contract binding to access the raw methods on
}

// WizardPresaleTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type WizardPresaleTransactorRaw struct {
	Contract *WizardPresaleTransactor // Generic write-only contract binding to access the raw methods on
}

// NewWizardPresale creates a new instance of WizardPresale, bound to a specific deployed contract.
func NewWizardPresale(address common.Address, backend bind.ContractBackend) (*WizardPresale, error) {
	contract, err := bindWizardPresale(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &WizardPresale{WizardPresaleCaller: WizardPresaleCaller{contract: contract}, WizardPresaleTransactor: WizardPresaleTransactor{contract: contract}, WizardPresaleFilterer: WizardPresaleFilterer{contract: contract}}, nil
}

// NewWizardPresaleCaller creates a new read-only instance of WizardPresale, bound to a specific deployed contract.
func NewWizardPresaleCaller(address common.Address, caller bind.ContractCaller) (*WizardPresaleCaller, error) {
	contract, err := bindWizardPresale(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &WizardPresaleCaller{contract: contract}, nil
}

// NewWizardPresaleTransactor creates a new write-only instance of WizardPresale, bound to a specific deployed contract.
func NewWizardPresaleTransactor(address common.Address, transactor bind.ContractTransactor) (*WizardPresaleTransactor, error) {
	contract, err := bindWizardPresale(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &WizardPresaleTransactor{contract: contract}, nil
}

// NewWizardPresaleFilterer creates a new log filterer instance of WizardPresale, bound to a specific deployed contract.
func NewWizardPresaleFilterer(address common.Address, filterer bind.ContractFilterer) (*WizardPresaleFilterer, error) {
	contract, err := bindWizardPresale(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &WizardPresaleFilterer{contract: contract}, nil
}

// bindWizardPresale binds a generic wrapper to an already deployed contract.
func bindWizardPresale(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(WizardPresaleABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_WizardPresale *WizardPresaleRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _WizardPresale.Contract.WizardPresaleCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_WizardPresale *WizardPresaleRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WizardPresale.Contract.WizardPresaleTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_WizardPresale *WizardPresaleRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _WizardPresale.Contract.WizardPresaleTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_WizardPresale *WizardPresaleCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _WizardPresale.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_WizardPresale *WizardPresaleTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WizardPresale.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_WizardPresale *WizardPresaleTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _WizardPresale.Contract.contract.Transact(opts, method, params...)
}

// INTERFACEIDWIZARDPRESALE is a free data retrieval call binding the contract method 0x8ef0da6f.
//
// Solidity: function _INTERFACE_ID_WIZARDPRESALE() constant returns(bytes4)
func (_WizardPresale *WizardPresaleCaller) INTERFACEIDWIZARDPRESALE(opts *bind.CallOpts) ([4]byte, error) {
	var (
		ret0 = new([4]byte)
	)
	out := ret0
	err := _WizardPresale.contract.Call(opts, out, "_INTERFACE_ID_WIZARDPRESALE")
	return *ret0, err
}

// INTERFACEIDWIZARDPRESALE is a free data retrieval call binding the contract method 0x8ef0da6f.
//
// Solidity: function _INTERFACE_ID_WIZARDPRESALE() constant returns(bytes4)
func (_WizardPresale *WizardPresaleSession) INTERFACEIDWIZARDPRESALE() ([4]byte, error) {
	return _WizardPresale.Contract.INTERFACEIDWIZARDPRESALE(&_WizardPresale.CallOpts)
}

// INTERFACEIDWIZARDPRESALE is a free data retrieval call binding the contract method 0x8ef0da6f.
//
// Solidity: function _INTERFACE_ID_WIZARDPRESALE() constant returns(bytes4)
func (_WizardPresale *WizardPresaleCallerSession) INTERFACEIDWIZARDPRESALE() ([4]byte, error) {
	return _WizardPresale.Contract.INTERFACEIDWIZARDPRESALE(&_WizardPresale.CallOpts)
}

// WizardsById is a free data retrieval call binding the contract method 0x63f3ce31.
//
// Solidity: function _wizardsById(uint256 ) constant returns(uint8 affinity, uint88 power, address owner)
func (_WizardPresale *WizardPresaleCaller) WizardsById(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Affinity uint8
	Power    *big.Int
	Owner    common.Address
}, error) {
	ret := new(struct {
		Affinity uint8
		Power    *big.Int
		Owner    common.Address
	})
	out := ret
	err := _WizardPresale.contract.Call(opts, out, "_wizardsById", arg0)
	return *ret, err
}

// WizardsById is a free data retrieval call binding the contract method 0x63f3ce31.
//
// Solidity: function _wizardsById(uint256 ) constant returns(uint8 affinity, uint88 power, address owner)
func (_WizardPresale *WizardPresaleSession) WizardsById(arg0 *big.Int) (struct {
	Affinity uint8
	Power    *big.Int
	Owner    common.Address
}, error) {
	return _WizardPresale.Contract.WizardsById(&_WizardPresale.CallOpts, arg0)
}

// WizardsById is a free data retrieval call binding the contract method 0x63f3ce31.
//
// Solidity: function _wizardsById(uint256 ) constant returns(uint8 affinity, uint88 power, address owner)
func (_WizardPresale *WizardPresaleCallerSession) WizardsById(arg0 *big.Int) (struct {
	Affinity uint8
	Power    *big.Int
	Owner    common.Address
}, error) {
	return _WizardPresale.Contract.WizardsById(&_WizardPresale.CallOpts, arg0)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) constant returns(uint256)
func (_WizardPresale *WizardPresaleCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _WizardPresale.contract.Call(opts, out, "balanceOf", owner)
	return *ret0, err
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) constant returns(uint256)
func (_WizardPresale *WizardPresaleSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _WizardPresale.Contract.BalanceOf(&_WizardPresale.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) constant returns(uint256)
func (_WizardPresale *WizardPresaleCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _WizardPresale.Contract.BalanceOf(&_WizardPresale.CallOpts, owner)
}

// CostToPower is a free data retrieval call binding the contract method 0xe5a604bf.
//
// Solidity: function costToPower(uint256 cost) constant returns(uint256 power)
func (_WizardPresale *WizardPresaleCaller) CostToPower(opts *bind.CallOpts, cost *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _WizardPresale.contract.Call(opts, out, "costToPower", cost)
	return *ret0, err
}

// CostToPower is a free data retrieval call binding the contract method 0xe5a604bf.
//
// Solidity: function costToPower(uint256 cost) constant returns(uint256 power)
func (_WizardPresale *WizardPresaleSession) CostToPower(cost *big.Int) (*big.Int, error) {
	return _WizardPresale.Contract.CostToPower(&_WizardPresale.CallOpts, cost)
}

// CostToPower is a free data retrieval call binding the contract method 0xe5a604bf.
//
// Solidity: function costToPower(uint256 cost) constant returns(uint256 power)
func (_WizardPresale *WizardPresaleCallerSession) CostToPower(cost *big.Int) (*big.Int, error) {
	return _WizardPresale.Contract.CostToPower(&_WizardPresale.CallOpts, cost)
}

// ElementalWizardCost is a free data retrieval call binding the contract method 0xec8cd3ce.
//
// Solidity: function elementalWizardCost() constant returns(uint256)
func (_WizardPresale *WizardPresaleCaller) ElementalWizardCost(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _WizardPresale.contract.Call(opts, out, "elementalWizardCost")
	return *ret0, err
}

// ElementalWizardCost is a free data retrieval call binding the contract method 0xec8cd3ce.
//
// Solidity: function elementalWizardCost() constant returns(uint256)
func (_WizardPresale *WizardPresaleSession) ElementalWizardCost() (*big.Int, error) {
	return _WizardPresale.Contract.ElementalWizardCost(&_WizardPresale.CallOpts)
}

// ElementalWizardCost is a free data retrieval call binding the contract method 0xec8cd3ce.
//
// Solidity: function elementalWizardCost() constant returns(uint256)
func (_WizardPresale *WizardPresaleCallerSession) ElementalWizardCost() (*big.Int, error) {
	return _WizardPresale.Contract.ElementalWizardCost(&_WizardPresale.CallOpts)
}

// ElementalWizardIncrement is a free data retrieval call binding the contract method 0x2447aee9.
//
// Solidity: function elementalWizardIncrement() constant returns(uint256)
func (_WizardPresale *WizardPresaleCaller) ElementalWizardIncrement(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _WizardPresale.contract.Call(opts, out, "elementalWizardIncrement")
	return *ret0, err
}

// ElementalWizardIncrement is a free data retrieval call binding the contract method 0x2447aee9.
//
// Solidity: function elementalWizardIncrement() constant returns(uint256)
func (_WizardPresale *WizardPresaleSession) ElementalWizardIncrement() (*big.Int, error) {
	return _WizardPresale.Contract.ElementalWizardIncrement(&_WizardPresale.CallOpts)
}

// ElementalWizardIncrement is a free data retrieval call binding the contract method 0x2447aee9.
//
// Solidity: function elementalWizardIncrement() constant returns(uint256)
func (_WizardPresale *WizardPresaleCallerSession) ElementalWizardIncrement() (*big.Int, error) {
	return _WizardPresale.Contract.ElementalWizardIncrement(&_WizardPresale.CallOpts)
}

// Gatekeeper is a free data retrieval call binding the contract method 0xa59c9c27.
//
// Solidity: function gatekeeper() constant returns(address)
func (_WizardPresale *WizardPresaleCaller) Gatekeeper(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _WizardPresale.contract.Call(opts, out, "gatekeeper")
	return *ret0, err
}

// Gatekeeper is a free data retrieval call binding the contract method 0xa59c9c27.
//
// Solidity: function gatekeeper() constant returns(address)
func (_WizardPresale *WizardPresaleSession) Gatekeeper() (common.Address, error) {
	return _WizardPresale.Contract.Gatekeeper(&_WizardPresale.CallOpts)
}

// Gatekeeper is a free data retrieval call binding the contract method 0xa59c9c27.
//
// Solidity: function gatekeeper() constant returns(address)
func (_WizardPresale *WizardPresaleCallerSession) Gatekeeper() (common.Address, error) {
	return _WizardPresale.Contract.Gatekeeper(&_WizardPresale.CallOpts)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) constant returns(address)
func (_WizardPresale *WizardPresaleCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _WizardPresale.contract.Call(opts, out, "getApproved", tokenId)
	return *ret0, err
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) constant returns(address)
func (_WizardPresale *WizardPresaleSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _WizardPresale.Contract.GetApproved(&_WizardPresale.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) constant returns(address)
func (_WizardPresale *WizardPresaleCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _WizardPresale.Contract.GetApproved(&_WizardPresale.CallOpts, tokenId)
}

// GetWizard is a free data retrieval call binding the contract method 0xfac8eafc.
//
// Solidity: function getWizard(uint256 id) constant returns(address owner, uint88 power, uint8 affinity)
func (_WizardPresale *WizardPresaleCaller) GetWizard(opts *bind.CallOpts, id *big.Int) (struct {
	Owner    common.Address
	Power    *big.Int
	Affinity uint8
}, error) {
	ret := new(struct {
		Owner    common.Address
		Power    *big.Int
		Affinity uint8
	})
	out := ret
	err := _WizardPresale.contract.Call(opts, out, "getWizard", id)
	return *ret, err
}

// GetWizard is a free data retrieval call binding the contract method 0xfac8eafc.
//
// Solidity: function getWizard(uint256 id) constant returns(address owner, uint88 power, uint8 affinity)
func (_WizardPresale *WizardPresaleSession) GetWizard(id *big.Int) (struct {
	Owner    common.Address
	Power    *big.Int
	Affinity uint8
}, error) {
	return _WizardPresale.Contract.GetWizard(&_WizardPresale.CallOpts, id)
}

// GetWizard is a free data retrieval call binding the contract method 0xfac8eafc.
//
// Solidity: function getWizard(uint256 id) constant returns(address owner, uint88 power, uint8 affinity)
func (_WizardPresale *WizardPresaleCallerSession) GetWizard(id *big.Int) (struct {
	Owner    common.Address
	Power    *big.Int
	Affinity uint8
}, error) {
	return _WizardPresale.Contract.GetWizard(&_WizardPresale.CallOpts, id)
}

// Guildmaster is a free data retrieval call binding the contract method 0x7f7ca38e.
//
// Solidity: function guildmaster() constant returns(address)
func (_WizardPresale *WizardPresaleCaller) Guildmaster(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _WizardPresale.contract.Call(opts, out, "guildmaster")
	return *ret0, err
}

// Guildmaster is a free data retrieval call binding the contract method 0x7f7ca38e.
//
// Solidity: function guildmaster() constant returns(address)
func (_WizardPresale *WizardPresaleSession) Guildmaster() (common.Address, error) {
	return _WizardPresale.Contract.Guildmaster(&_WizardPresale.CallOpts)
}

// Guildmaster is a free data retrieval call binding the contract method 0x7f7ca38e.
//
// Solidity: function guildmaster() constant returns(address)
func (_WizardPresale *WizardPresaleCallerSession) Guildmaster() (common.Address, error) {
	return _WizardPresale.Contract.Guildmaster(&_WizardPresale.CallOpts)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) constant returns(bool)
func (_WizardPresale *WizardPresaleCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _WizardPresale.contract.Call(opts, out, "isApprovedForAll", owner, operator)
	return *ret0, err
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) constant returns(bool)
func (_WizardPresale *WizardPresaleSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _WizardPresale.Contract.IsApprovedForAll(&_WizardPresale.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) constant returns(bool)
func (_WizardPresale *WizardPresaleCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _WizardPresale.Contract.IsApprovedForAll(&_WizardPresale.CallOpts, owner, operator)
}

// IsDuringSale is a free data retrieval call binding the contract method 0x6de9b6d8.
//
// Solidity: function isDuringSale() constant returns(bool)
func (_WizardPresale *WizardPresaleCaller) IsDuringSale(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _WizardPresale.contract.Call(opts, out, "isDuringSale")
	return *ret0, err
}

// IsDuringSale is a free data retrieval call binding the contract method 0x6de9b6d8.
//
// Solidity: function isDuringSale() constant returns(bool)
func (_WizardPresale *WizardPresaleSession) IsDuringSale() (bool, error) {
	return _WizardPresale.Contract.IsDuringSale(&_WizardPresale.CallOpts)
}

// IsDuringSale is a free data retrieval call binding the contract method 0x6de9b6d8.
//
// Solidity: function isDuringSale() constant returns(bool)
func (_WizardPresale *WizardPresaleCallerSession) IsDuringSale() (bool, error) {
	return _WizardPresale.Contract.IsDuringSale(&_WizardPresale.CallOpts)
}

// MaxExclusives is a free data retrieval call binding the contract method 0x9b025025.
//
// Solidity: function maxExclusives() constant returns(uint256)
func (_WizardPresale *WizardPresaleCaller) MaxExclusives(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _WizardPresale.contract.Call(opts, out, "maxExclusives")
	return *ret0, err
}

// MaxExclusives is a free data retrieval call binding the contract method 0x9b025025.
//
// Solidity: function maxExclusives() constant returns(uint256)
func (_WizardPresale *WizardPresaleSession) MaxExclusives() (*big.Int, error) {
	return _WizardPresale.Contract.MaxExclusives(&_WizardPresale.CallOpts)
}

// MaxExclusives is a free data retrieval call binding the contract method 0x9b025025.
//
// Solidity: function maxExclusives() constant returns(uint256)
func (_WizardPresale *WizardPresaleCallerSession) MaxExclusives() (*big.Int, error) {
	return _WizardPresale.Contract.MaxExclusives(&_WizardPresale.CallOpts)
}

// NeutralWizardCost is a free data retrieval call binding the contract method 0x8be7310c.
//
// Solidity: function neutralWizardCost() constant returns(uint256)
func (_WizardPresale *WizardPresaleCaller) NeutralWizardCost(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _WizardPresale.contract.Call(opts, out, "neutralWizardCost")
	return *ret0, err
}

// NeutralWizardCost is a free data retrieval call binding the contract method 0x8be7310c.
//
// Solidity: function neutralWizardCost() constant returns(uint256)
func (_WizardPresale *WizardPresaleSession) NeutralWizardCost() (*big.Int, error) {
	return _WizardPresale.Contract.NeutralWizardCost(&_WizardPresale.CallOpts)
}

// NeutralWizardCost is a free data retrieval call binding the contract method 0x8be7310c.
//
// Solidity: function neutralWizardCost() constant returns(uint256)
func (_WizardPresale *WizardPresaleCallerSession) NeutralWizardCost() (*big.Int, error) {
	return _WizardPresale.Contract.NeutralWizardCost(&_WizardPresale.CallOpts)
}

// NextWizardId is a free data retrieval call binding the contract method 0xdc9f1cdd.
//
// Solidity: function nextWizardId() constant returns(uint256)
func (_WizardPresale *WizardPresaleCaller) NextWizardId(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _WizardPresale.contract.Call(opts, out, "nextWizardId")
	return *ret0, err
}

// NextWizardId is a free data retrieval call binding the contract method 0xdc9f1cdd.
//
// Solidity: function nextWizardId() constant returns(uint256)
func (_WizardPresale *WizardPresaleSession) NextWizardId() (*big.Int, error) {
	return _WizardPresale.Contract.NextWizardId(&_WizardPresale.CallOpts)
}

// NextWizardId is a free data retrieval call binding the contract method 0xdc9f1cdd.
//
// Solidity: function nextWizardId() constant returns(uint256)
func (_WizardPresale *WizardPresaleCallerSession) NextWizardId() (*big.Int, error) {
	return _WizardPresale.Contract.NextWizardId(&_WizardPresale.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) constant returns(address)
func (_WizardPresale *WizardPresaleCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _WizardPresale.contract.Call(opts, out, "ownerOf", tokenId)
	return *ret0, err
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) constant returns(address)
func (_WizardPresale *WizardPresaleSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _WizardPresale.Contract.OwnerOf(&_WizardPresale.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) constant returns(address)
func (_WizardPresale *WizardPresaleCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _WizardPresale.Contract.OwnerOf(&_WizardPresale.CallOpts, tokenId)
}

// PowerToCost is a free data retrieval call binding the contract method 0x48b92c20.
//
// Solidity: function powerToCost(uint256 power) constant returns(uint256 cost)
func (_WizardPresale *WizardPresaleCaller) PowerToCost(opts *bind.CallOpts, power *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _WizardPresale.contract.Call(opts, out, "powerToCost", power)
	return *ret0, err
}

// PowerToCost is a free data retrieval call binding the contract method 0x48b92c20.
//
// Solidity: function powerToCost(uint256 power) constant returns(uint256 cost)
func (_WizardPresale *WizardPresaleSession) PowerToCost(power *big.Int) (*big.Int, error) {
	return _WizardPresale.Contract.PowerToCost(&_WizardPresale.CallOpts, power)
}

// PowerToCost is a free data retrieval call binding the contract method 0x48b92c20.
//
// Solidity: function powerToCost(uint256 power) constant returns(uint256 cost)
func (_WizardPresale *WizardPresaleCallerSession) PowerToCost(power *big.Int) (*big.Int, error) {
	return _WizardPresale.Contract.PowerToCost(&_WizardPresale.CallOpts, power)
}

// SaleDuration is a free data retrieval call binding the contract method 0x3711d9fb.
//
// Solidity: function saleDuration() constant returns(uint256)
func (_WizardPresale *WizardPresaleCaller) SaleDuration(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _WizardPresale.contract.Call(opts, out, "saleDuration")
	return *ret0, err
}

// SaleDuration is a free data retrieval call binding the contract method 0x3711d9fb.
//
// Solidity: function saleDuration() constant returns(uint256)
func (_WizardPresale *WizardPresaleSession) SaleDuration() (*big.Int, error) {
	return _WizardPresale.Contract.SaleDuration(&_WizardPresale.CallOpts)
}

// SaleDuration is a free data retrieval call binding the contract method 0x3711d9fb.
//
// Solidity: function saleDuration() constant returns(uint256)
func (_WizardPresale *WizardPresaleCallerSession) SaleDuration() (*big.Int, error) {
	return _WizardPresale.Contract.SaleDuration(&_WizardPresale.CallOpts)
}

// SaleStartBlock is a free data retrieval call binding the contract method 0x20027275.
//
// Solidity: function saleStartBlock() constant returns(uint256)
func (_WizardPresale *WizardPresaleCaller) SaleStartBlock(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _WizardPresale.contract.Call(opts, out, "saleStartBlock")
	return *ret0, err
}

// SaleStartBlock is a free data retrieval call binding the contract method 0x20027275.
//
// Solidity: function saleStartBlock() constant returns(uint256)
func (_WizardPresale *WizardPresaleSession) SaleStartBlock() (*big.Int, error) {
	return _WizardPresale.Contract.SaleStartBlock(&_WizardPresale.CallOpts)
}

// SaleStartBlock is a free data retrieval call binding the contract method 0x20027275.
//
// Solidity: function saleStartBlock() constant returns(uint256)
func (_WizardPresale *WizardPresaleCallerSession) SaleStartBlock() (*big.Int, error) {
	return _WizardPresale.Contract.SaleStartBlock(&_WizardPresale.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) constant returns(bool)
func (_WizardPresale *WizardPresaleCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _WizardPresale.contract.Call(opts, out, "supportsInterface", interfaceId)
	return *ret0, err
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) constant returns(bool)
func (_WizardPresale *WizardPresaleSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _WizardPresale.Contract.SupportsInterface(&_WizardPresale.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) constant returns(bool)
func (_WizardPresale *WizardPresaleCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _WizardPresale.Contract.SupportsInterface(&_WizardPresale.CallOpts, interfaceId)
}

// AbsorbWizard is a paid mutator transaction binding the contract method 0xa7847c3a.
//
// Solidity: function absorbWizard(uint256 id) returns(address owner, uint256 power, uint8 affinity)
func (_WizardPresale *WizardPresaleTransactor) AbsorbWizard(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error) {
	return _WizardPresale.contract.Transact(opts, "absorbWizard", id)
}

// AbsorbWizard is a paid mutator transaction binding the contract method 0xa7847c3a.
//
// Solidity: function absorbWizard(uint256 id) returns(address owner, uint256 power, uint8 affinity)
func (_WizardPresale *WizardPresaleSession) AbsorbWizard(id *big.Int) (*types.Transaction, error) {
	return _WizardPresale.Contract.AbsorbWizard(&_WizardPresale.TransactOpts, id)
}

// AbsorbWizard is a paid mutator transaction binding the contract method 0xa7847c3a.
//
// Solidity: function absorbWizard(uint256 id) returns(address owner, uint256 power, uint8 affinity)
func (_WizardPresale *WizardPresaleTransactorSession) AbsorbWizard(id *big.Int) (*types.Transaction, error) {
	return _WizardPresale.Contract.AbsorbWizard(&_WizardPresale.TransactOpts, id)
}

// AbsorbWizardMulti is a paid mutator transaction binding the contract method 0x476c4a5e.
//
// Solidity: function absorbWizardMulti(uint256[] ids) returns(address[] owners, uint256[] powers, uint8[] affinities)
func (_WizardPresale *WizardPresaleTransactor) AbsorbWizardMulti(opts *bind.TransactOpts, ids []*big.Int) (*types.Transaction, error) {
	return _WizardPresale.contract.Transact(opts, "absorbWizardMulti", ids)
}

// AbsorbWizardMulti is a paid mutator transaction binding the contract method 0x476c4a5e.
//
// Solidity: function absorbWizardMulti(uint256[] ids) returns(address[] owners, uint256[] powers, uint8[] affinities)
func (_WizardPresale *WizardPresaleSession) AbsorbWizardMulti(ids []*big.Int) (*types.Transaction, error) {
	return _WizardPresale.Contract.AbsorbWizardMulti(&_WizardPresale.TransactOpts, ids)
}

// AbsorbWizardMulti is a paid mutator transaction binding the contract method 0x476c4a5e.
//
// Solidity: function absorbWizardMulti(uint256[] ids) returns(address[] owners, uint256[] powers, uint8[] affinities)
func (_WizardPresale *WizardPresaleTransactorSession) AbsorbWizardMulti(ids []*big.Int) (*types.Transaction, error) {
	return _WizardPresale.Contract.AbsorbWizardMulti(&_WizardPresale.TransactOpts, ids)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_WizardPresale *WizardPresaleTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _WizardPresale.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_WizardPresale *WizardPresaleSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _WizardPresale.Contract.Approve(&_WizardPresale.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_WizardPresale *WizardPresaleTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _WizardPresale.Contract.Approve(&_WizardPresale.TransactOpts, to, tokenId)
}

// ConjureExclusiveWizard is a paid mutator transaction binding the contract method 0x795cfa9b.
//
// Solidity: function conjureExclusiveWizard(uint256 id, address owner, uint8 affinity) returns()
func (_WizardPresale *WizardPresaleTransactor) ConjureExclusiveWizard(opts *bind.TransactOpts, id *big.Int, owner common.Address, affinity uint8) (*types.Transaction, error) {
	return _WizardPresale.contract.Transact(opts, "conjureExclusiveWizard", id, owner, affinity)
}

// ConjureExclusiveWizard is a paid mutator transaction binding the contract method 0x795cfa9b.
//
// Solidity: function conjureExclusiveWizard(uint256 id, address owner, uint8 affinity) returns()
func (_WizardPresale *WizardPresaleSession) ConjureExclusiveWizard(id *big.Int, owner common.Address, affinity uint8) (*types.Transaction, error) {
	return _WizardPresale.Contract.ConjureExclusiveWizard(&_WizardPresale.TransactOpts, id, owner, affinity)
}

// ConjureExclusiveWizard is a paid mutator transaction binding the contract method 0x795cfa9b.
//
// Solidity: function conjureExclusiveWizard(uint256 id, address owner, uint8 affinity) returns()
func (_WizardPresale *WizardPresaleTransactorSession) ConjureExclusiveWizard(id *big.Int, owner common.Address, affinity uint8) (*types.Transaction, error) {
	return _WizardPresale.Contract.ConjureExclusiveWizard(&_WizardPresale.TransactOpts, id, owner, affinity)
}

// ConjureExclusiveWizardMulti is a paid mutator transaction binding the contract method 0xffc0b9ad.
//
// Solidity: function conjureExclusiveWizardMulti(uint256[] ids, address[] owners, uint256[] powers, uint8[] affinities) returns()
func (_WizardPresale *WizardPresaleTransactor) ConjureExclusiveWizardMulti(opts *bind.TransactOpts, ids []*big.Int, owners []common.Address, powers []*big.Int, affinities []uint8) (*types.Transaction, error) {
	return _WizardPresale.contract.Transact(opts, "conjureExclusiveWizardMulti", ids, owners, powers, affinities)
}

// ConjureExclusiveWizardMulti is a paid mutator transaction binding the contract method 0xffc0b9ad.
//
// Solidity: function conjureExclusiveWizardMulti(uint256[] ids, address[] owners, uint256[] powers, uint8[] affinities) returns()
func (_WizardPresale *WizardPresaleSession) ConjureExclusiveWizardMulti(ids []*big.Int, owners []common.Address, powers []*big.Int, affinities []uint8) (*types.Transaction, error) {
	return _WizardPresale.Contract.ConjureExclusiveWizardMulti(&_WizardPresale.TransactOpts, ids, owners, powers, affinities)
}

// ConjureExclusiveWizardMulti is a paid mutator transaction binding the contract method 0xffc0b9ad.
//
// Solidity: function conjureExclusiveWizardMulti(uint256[] ids, address[] owners, uint256[] powers, uint8[] affinities) returns()
func (_WizardPresale *WizardPresaleTransactorSession) ConjureExclusiveWizardMulti(ids []*big.Int, owners []common.Address, powers []*big.Int, affinities []uint8) (*types.Transaction, error) {
	return _WizardPresale.Contract.ConjureExclusiveWizardMulti(&_WizardPresale.TransactOpts, ids, owners, powers, affinities)
}

// ConjureWizard is a paid mutator transaction binding the contract method 0x573f322f.
//
// Solidity: function conjureWizard(uint8 affinity) returns(uint256 wizardId)
func (_WizardPresale *WizardPresaleTransactor) ConjureWizard(opts *bind.TransactOpts, affinity uint8) (*types.Transaction, error) {
	return _WizardPresale.contract.Transact(opts, "conjureWizard", affinity)
}

// ConjureWizard is a paid mutator transaction binding the contract method 0x573f322f.
//
// Solidity: function conjureWizard(uint8 affinity) returns(uint256 wizardId)
func (_WizardPresale *WizardPresaleSession) ConjureWizard(affinity uint8) (*types.Transaction, error) {
	return _WizardPresale.Contract.ConjureWizard(&_WizardPresale.TransactOpts, affinity)
}

// ConjureWizard is a paid mutator transaction binding the contract method 0x573f322f.
//
// Solidity: function conjureWizard(uint8 affinity) returns(uint256 wizardId)
func (_WizardPresale *WizardPresaleTransactorSession) ConjureWizard(affinity uint8) (*types.Transaction, error) {
	return _WizardPresale.Contract.ConjureWizard(&_WizardPresale.TransactOpts, affinity)
}

// ConjureWizardMulti is a paid mutator transaction binding the contract method 0xce6991fd.
//
// Solidity: function conjureWizardMulti(uint8[] affinities) returns(uint256[] wizardIds)
func (_WizardPresale *WizardPresaleTransactor) ConjureWizardMulti(opts *bind.TransactOpts, affinities []uint8) (*types.Transaction, error) {
	return _WizardPresale.contract.Transact(opts, "conjureWizardMulti", affinities)
}

// ConjureWizardMulti is a paid mutator transaction binding the contract method 0xce6991fd.
//
// Solidity: function conjureWizardMulti(uint8[] affinities) returns(uint256[] wizardIds)
func (_WizardPresale *WizardPresaleSession) ConjureWizardMulti(affinities []uint8) (*types.Transaction, error) {
	return _WizardPresale.Contract.ConjureWizardMulti(&_WizardPresale.TransactOpts, affinities)
}

// ConjureWizardMulti is a paid mutator transaction binding the contract method 0xce6991fd.
//
// Solidity: function conjureWizardMulti(uint8[] affinities) returns(uint256[] wizardIds)
func (_WizardPresale *WizardPresaleTransactorSession) ConjureWizardMulti(affinities []uint8) (*types.Transaction, error) {
	return _WizardPresale.Contract.ConjureWizardMulti(&_WizardPresale.TransactOpts, affinities)
}

// Destroy is a paid mutator transaction binding the contract method 0x83197ef0.
//
// Solidity: function destroy() returns()
func (_WizardPresale *WizardPresaleTransactor) Destroy(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WizardPresale.contract.Transact(opts, "destroy")
}

// Destroy is a paid mutator transaction binding the contract method 0x83197ef0.
//
// Solidity: function destroy() returns()
func (_WizardPresale *WizardPresaleSession) Destroy() (*types.Transaction, error) {
	return _WizardPresale.Contract.Destroy(&_WizardPresale.TransactOpts)
}

// Destroy is a paid mutator transaction binding the contract method 0x83197ef0.
//
// Solidity: function destroy() returns()
func (_WizardPresale *WizardPresaleTransactorSession) Destroy() (*types.Transaction, error) {
	return _WizardPresale.Contract.Destroy(&_WizardPresale.TransactOpts)
}

// PostponeSale is a paid mutator transaction binding the contract method 0x565ca6dd.
//
// Solidity: function postponeSale(uint128 newStart) returns()
func (_WizardPresale *WizardPresaleTransactor) PostponeSale(opts *bind.TransactOpts, newStart *big.Int) (*types.Transaction, error) {
	return _WizardPresale.contract.Transact(opts, "postponeSale", newStart)
}

// PostponeSale is a paid mutator transaction binding the contract method 0x565ca6dd.
//
// Solidity: function postponeSale(uint128 newStart) returns()
func (_WizardPresale *WizardPresaleSession) PostponeSale(newStart *big.Int) (*types.Transaction, error) {
	return _WizardPresale.Contract.PostponeSale(&_WizardPresale.TransactOpts, newStart)
}

// PostponeSale is a paid mutator transaction binding the contract method 0x565ca6dd.
//
// Solidity: function postponeSale(uint128 newStart) returns()
func (_WizardPresale *WizardPresaleTransactorSession) PostponeSale(newStart *big.Int) (*types.Transaction, error) {
	return _WizardPresale.Contract.PostponeSale(&_WizardPresale.TransactOpts, newStart)
}

// SafeConjureExclusiveWizard is a paid mutator transaction binding the contract method 0xf1cb5606.
//
// Solidity: function safeConjureExclusiveWizard(uint256 id, address owner, uint8 affinity) returns()
func (_WizardPresale *WizardPresaleTransactor) SafeConjureExclusiveWizard(opts *bind.TransactOpts, id *big.Int, owner common.Address, affinity uint8) (*types.Transaction, error) {
	return _WizardPresale.contract.Transact(opts, "safeConjureExclusiveWizard", id, owner, affinity)
}

// SafeConjureExclusiveWizard is a paid mutator transaction binding the contract method 0xf1cb5606.
//
// Solidity: function safeConjureExclusiveWizard(uint256 id, address owner, uint8 affinity) returns()
func (_WizardPresale *WizardPresaleSession) SafeConjureExclusiveWizard(id *big.Int, owner common.Address, affinity uint8) (*types.Transaction, error) {
	return _WizardPresale.Contract.SafeConjureExclusiveWizard(&_WizardPresale.TransactOpts, id, owner, affinity)
}

// SafeConjureExclusiveWizard is a paid mutator transaction binding the contract method 0xf1cb5606.
//
// Solidity: function safeConjureExclusiveWizard(uint256 id, address owner, uint8 affinity) returns()
func (_WizardPresale *WizardPresaleTransactorSession) SafeConjureExclusiveWizard(id *big.Int, owner common.Address, affinity uint8) (*types.Transaction, error) {
	return _WizardPresale.Contract.SafeConjureExclusiveWizard(&_WizardPresale.TransactOpts, id, owner, affinity)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_WizardPresale *WizardPresaleTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _WizardPresale.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_WizardPresale *WizardPresaleSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _WizardPresale.Contract.SafeTransferFrom(&_WizardPresale.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_WizardPresale *WizardPresaleTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _WizardPresale.Contract.SafeTransferFrom(&_WizardPresale.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_WizardPresale *WizardPresaleTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _WizardPresale.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_WizardPresale *WizardPresaleSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _WizardPresale.Contract.SafeTransferFrom0(&_WizardPresale.TransactOpts, from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_WizardPresale *WizardPresaleTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _WizardPresale.Contract.SafeTransferFrom0(&_WizardPresale.TransactOpts, from, to, tokenId, _data)
}

// SetAffinity is a paid mutator transaction binding the contract method 0x98d7a414.
//
// Solidity: function setAffinity(uint256 wizardId, uint8 newAffinity) returns()
func (_WizardPresale *WizardPresaleTransactor) SetAffinity(opts *bind.TransactOpts, wizardId *big.Int, newAffinity uint8) (*types.Transaction, error) {
	return _WizardPresale.contract.Transact(opts, "setAffinity", wizardId, newAffinity)
}

// SetAffinity is a paid mutator transaction binding the contract method 0x98d7a414.
//
// Solidity: function setAffinity(uint256 wizardId, uint8 newAffinity) returns()
func (_WizardPresale *WizardPresaleSession) SetAffinity(wizardId *big.Int, newAffinity uint8) (*types.Transaction, error) {
	return _WizardPresale.Contract.SetAffinity(&_WizardPresale.TransactOpts, wizardId, newAffinity)
}

// SetAffinity is a paid mutator transaction binding the contract method 0x98d7a414.
//
// Solidity: function setAffinity(uint256 wizardId, uint8 newAffinity) returns()
func (_WizardPresale *WizardPresaleTransactorSession) SetAffinity(wizardId *big.Int, newAffinity uint8) (*types.Transaction, error) {
	return _WizardPresale.Contract.SetAffinity(&_WizardPresale.TransactOpts, wizardId, newAffinity)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address to, bool approved) returns()
func (_WizardPresale *WizardPresaleTransactor) SetApprovalForAll(opts *bind.TransactOpts, to common.Address, approved bool) (*types.Transaction, error) {
	return _WizardPresale.contract.Transact(opts, "setApprovalForAll", to, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address to, bool approved) returns()
func (_WizardPresale *WizardPresaleSession) SetApprovalForAll(to common.Address, approved bool) (*types.Transaction, error) {
	return _WizardPresale.Contract.SetApprovalForAll(&_WizardPresale.TransactOpts, to, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address to, bool approved) returns()
func (_WizardPresale *WizardPresaleTransactorSession) SetApprovalForAll(to common.Address, approved bool) (*types.Transaction, error) {
	return _WizardPresale.Contract.SetApprovalForAll(&_WizardPresale.TransactOpts, to, approved)
}

// SetGatekeeper is a paid mutator transaction binding the contract method 0xfbb97956.
//
// Solidity: function setGatekeeper(address gc) returns()
func (_WizardPresale *WizardPresaleTransactor) SetGatekeeper(opts *bind.TransactOpts, gc common.Address) (*types.Transaction, error) {
	return _WizardPresale.contract.Transact(opts, "setGatekeeper", gc)
}

// SetGatekeeper is a paid mutator transaction binding the contract method 0xfbb97956.
//
// Solidity: function setGatekeeper(address gc) returns()
func (_WizardPresale *WizardPresaleSession) SetGatekeeper(gc common.Address) (*types.Transaction, error) {
	return _WizardPresale.Contract.SetGatekeeper(&_WizardPresale.TransactOpts, gc)
}

// SetGatekeeper is a paid mutator transaction binding the contract method 0xfbb97956.
//
// Solidity: function setGatekeeper(address gc) returns()
func (_WizardPresale *WizardPresaleTransactorSession) SetGatekeeper(gc common.Address) (*types.Transaction, error) {
	return _WizardPresale.Contract.SetGatekeeper(&_WizardPresale.TransactOpts, gc)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_WizardPresale *WizardPresaleTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _WizardPresale.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_WizardPresale *WizardPresaleSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _WizardPresale.Contract.TransferFrom(&_WizardPresale.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_WizardPresale *WizardPresaleTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _WizardPresale.Contract.TransferFrom(&_WizardPresale.TransactOpts, from, to, tokenId)
}

// WizardPresaleApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the WizardPresale contract.
type WizardPresaleApprovalIterator struct {
	Event *WizardPresaleApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WizardPresaleApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WizardPresaleApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WizardPresaleApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WizardPresaleApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WizardPresaleApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WizardPresaleApproval represents a Approval event raised by the WizardPresale contract.
type WizardPresaleApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_WizardPresale *WizardPresaleFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*WizardPresaleApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _WizardPresale.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &WizardPresaleApprovalIterator{contract: _WizardPresale.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_WizardPresale *WizardPresaleFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *WizardPresaleApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _WizardPresale.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WizardPresaleApproval)
				if err := _WizardPresale.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_WizardPresale *WizardPresaleFilterer) ParseApproval(log types.Log) (*WizardPresaleApproval, error) {
	event := new(WizardPresaleApproval)
	if err := _WizardPresale.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	return event, nil
}

// WizardPresaleApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the WizardPresale contract.
type WizardPresaleApprovalForAllIterator struct {
	Event *WizardPresaleApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WizardPresaleApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WizardPresaleApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WizardPresaleApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WizardPresaleApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WizardPresaleApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WizardPresaleApprovalForAll represents a ApprovalForAll event raised by the WizardPresale contract.
type WizardPresaleApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_WizardPresale *WizardPresaleFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*WizardPresaleApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _WizardPresale.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &WizardPresaleApprovalForAllIterator{contract: _WizardPresale.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_WizardPresale *WizardPresaleFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *WizardPresaleApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _WizardPresale.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WizardPresaleApprovalForAll)
				if err := _WizardPresale.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_WizardPresale *WizardPresaleFilterer) ParseApprovalForAll(log types.Log) (*WizardPresaleApprovalForAll, error) {
	event := new(WizardPresaleApprovalForAll)
	if err := _WizardPresale.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	return event, nil
}

// WizardPresaleStartBlockChangedIterator is returned from FilterStartBlockChanged and is used to iterate over the raw logs and unpacked data for StartBlockChanged events raised by the WizardPresale contract.
type WizardPresaleStartBlockChangedIterator struct {
	Event *WizardPresaleStartBlockChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WizardPresaleStartBlockChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WizardPresaleStartBlockChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WizardPresaleStartBlockChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WizardPresaleStartBlockChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WizardPresaleStartBlockChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WizardPresaleStartBlockChanged represents a StartBlockChanged event raised by the WizardPresale contract.
type WizardPresaleStartBlockChanged struct {
	OldStartBlock *big.Int
	NewStartBlock *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterStartBlockChanged is a free log retrieval operation binding the contract event 0x8774aa9221f02a7971c04902013456be92b6a521a2347a44ec6610e4b9a5d8fc.
//
// Solidity: event StartBlockChanged(uint256 oldStartBlock, uint256 newStartBlock)
func (_WizardPresale *WizardPresaleFilterer) FilterStartBlockChanged(opts *bind.FilterOpts) (*WizardPresaleStartBlockChangedIterator, error) {

	logs, sub, err := _WizardPresale.contract.FilterLogs(opts, "StartBlockChanged")
	if err != nil {
		return nil, err
	}
	return &WizardPresaleStartBlockChangedIterator{contract: _WizardPresale.contract, event: "StartBlockChanged", logs: logs, sub: sub}, nil
}

// WatchStartBlockChanged is a free log subscription operation binding the contract event 0x8774aa9221f02a7971c04902013456be92b6a521a2347a44ec6610e4b9a5d8fc.
//
// Solidity: event StartBlockChanged(uint256 oldStartBlock, uint256 newStartBlock)
func (_WizardPresale *WizardPresaleFilterer) WatchStartBlockChanged(opts *bind.WatchOpts, sink chan<- *WizardPresaleStartBlockChanged) (event.Subscription, error) {

	logs, sub, err := _WizardPresale.contract.WatchLogs(opts, "StartBlockChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WizardPresaleStartBlockChanged)
				if err := _WizardPresale.contract.UnpackLog(event, "StartBlockChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStartBlockChanged is a log parse operation binding the contract event 0x8774aa9221f02a7971c04902013456be92b6a521a2347a44ec6610e4b9a5d8fc.
//
// Solidity: event StartBlockChanged(uint256 oldStartBlock, uint256 newStartBlock)
func (_WizardPresale *WizardPresaleFilterer) ParseStartBlockChanged(log types.Log) (*WizardPresaleStartBlockChanged, error) {
	event := new(WizardPresaleStartBlockChanged)
	if err := _WizardPresale.contract.UnpackLog(event, "StartBlockChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// WizardPresaleTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the WizardPresale contract.
type WizardPresaleTransferIterator struct {
	Event *WizardPresaleTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WizardPresaleTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WizardPresaleTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WizardPresaleTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WizardPresaleTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WizardPresaleTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WizardPresaleTransfer represents a Transfer event raised by the WizardPresale contract.
type WizardPresaleTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_WizardPresale *WizardPresaleFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*WizardPresaleTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _WizardPresale.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &WizardPresaleTransferIterator{contract: _WizardPresale.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_WizardPresale *WizardPresaleFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *WizardPresaleTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _WizardPresale.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WizardPresaleTransfer)
				if err := _WizardPresale.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_WizardPresale *WizardPresaleFilterer) ParseTransfer(log types.Log) (*WizardPresaleTransfer, error) {
	event := new(WizardPresaleTransfer)
	if err := _WizardPresale.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	return event, nil
}

// WizardPresaleWizardAlignmentAssignedIterator is returned from FilterWizardAlignmentAssigned and is used to iterate over the raw logs and unpacked data for WizardAlignmentAssigned events raised by the WizardPresale contract.
type WizardPresaleWizardAlignmentAssignedIterator struct {
	Event *WizardPresaleWizardAlignmentAssigned // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WizardPresaleWizardAlignmentAssignedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WizardPresaleWizardAlignmentAssigned)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WizardPresaleWizardAlignmentAssigned)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WizardPresaleWizardAlignmentAssignedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WizardPresaleWizardAlignmentAssignedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WizardPresaleWizardAlignmentAssigned represents a WizardAlignmentAssigned event raised by the WizardPresale contract.
type WizardPresaleWizardAlignmentAssigned struct {
	TokenId *big.Int
	Element uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterWizardAlignmentAssigned is a free log retrieval operation binding the contract event 0x0f0bc6913c78f45e890c2265a362fd955a202a954142552907cb83e4ef9f409a.
//
// Solidity: event WizardAlignmentAssigned(uint256 indexed tokenId, uint8 element)
func (_WizardPresale *WizardPresaleFilterer) FilterWizardAlignmentAssigned(opts *bind.FilterOpts, tokenId []*big.Int) (*WizardPresaleWizardAlignmentAssignedIterator, error) {

	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _WizardPresale.contract.FilterLogs(opts, "WizardAlignmentAssigned", tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &WizardPresaleWizardAlignmentAssignedIterator{contract: _WizardPresale.contract, event: "WizardAlignmentAssigned", logs: logs, sub: sub}, nil
}

// WatchWizardAlignmentAssigned is a free log subscription operation binding the contract event 0x0f0bc6913c78f45e890c2265a362fd955a202a954142552907cb83e4ef9f409a.
//
// Solidity: event WizardAlignmentAssigned(uint256 indexed tokenId, uint8 element)
func (_WizardPresale *WizardPresaleFilterer) WatchWizardAlignmentAssigned(opts *bind.WatchOpts, sink chan<- *WizardPresaleWizardAlignmentAssigned, tokenId []*big.Int) (event.Subscription, error) {

	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _WizardPresale.contract.WatchLogs(opts, "WizardAlignmentAssigned", tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WizardPresaleWizardAlignmentAssigned)
				if err := _WizardPresale.contract.UnpackLog(event, "WizardAlignmentAssigned", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWizardAlignmentAssigned is a log parse operation binding the contract event 0x0f0bc6913c78f45e890c2265a362fd955a202a954142552907cb83e4ef9f409a.
//
// Solidity: event WizardAlignmentAssigned(uint256 indexed tokenId, uint8 element)
func (_WizardPresale *WizardPresaleFilterer) ParseWizardAlignmentAssigned(log types.Log) (*WizardPresaleWizardAlignmentAssigned, error) {
	event := new(WizardPresaleWizardAlignmentAssigned)
	if err := _WizardPresale.contract.UnpackLog(event, "WizardAlignmentAssigned", log); err != nil {
		return nil, err
	}
	return event, nil
}

// WizardPresaleWizardSummonedIterator is returned from FilterWizardSummoned and is used to iterate over the raw logs and unpacked data for WizardSummoned events raised by the WizardPresale contract.
type WizardPresaleWizardSummonedIterator struct {
	Event *WizardPresaleWizardSummoned // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WizardPresaleWizardSummonedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WizardPresaleWizardSummoned)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WizardPresaleWizardSummoned)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WizardPresaleWizardSummonedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WizardPresaleWizardSummonedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WizardPresaleWizardSummoned represents a WizardSummoned event raised by the WizardPresale contract.
type WizardPresaleWizardSummoned struct {
	TokenId *big.Int
	Element uint8
	Power   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterWizardSummoned is a free log retrieval operation binding the contract event 0x7c0fbd69c04ea8ef6f62724eebd9c311d984e86457a801d81c0cb52ec9039170.
//
// Solidity: event WizardSummoned(uint256 indexed tokenId, uint8 element, uint256 power)
func (_WizardPresale *WizardPresaleFilterer) FilterWizardSummoned(opts *bind.FilterOpts, tokenId []*big.Int) (*WizardPresaleWizardSummonedIterator, error) {

	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _WizardPresale.contract.FilterLogs(opts, "WizardSummoned", tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &WizardPresaleWizardSummonedIterator{contract: _WizardPresale.contract, event: "WizardSummoned", logs: logs, sub: sub}, nil
}

// WatchWizardSummoned is a free log subscription operation binding the contract event 0x7c0fbd69c04ea8ef6f62724eebd9c311d984e86457a801d81c0cb52ec9039170.
//
// Solidity: event WizardSummoned(uint256 indexed tokenId, uint8 element, uint256 power)
func (_WizardPresale *WizardPresaleFilterer) WatchWizardSummoned(opts *bind.WatchOpts, sink chan<- *WizardPresaleWizardSummoned, tokenId []*big.Int) (event.Subscription, error) {

	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _WizardPresale.contract.WatchLogs(opts, "WizardSummoned", tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WizardPresaleWizardSummoned)
				if err := _WizardPresale.contract.UnpackLog(event, "WizardSummoned", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWizardSummoned is a log parse operation binding the contract event 0x7c0fbd69c04ea8ef6f62724eebd9c311d984e86457a801d81c0cb52ec9039170.
//
// Solidity: event WizardSummoned(uint256 indexed tokenId, uint8 element, uint256 power)
func (_WizardPresale *WizardPresaleFilterer) ParseWizardSummoned(log types.Log) (*WizardPresaleWizardSummoned, error) {
	event := new(WizardPresaleWizardSummoned)
	if err := _WizardPresale.contract.UnpackLog(event, "WizardSummoned", log); err != nil {
		return nil, err
	}
	return event, nil
}
